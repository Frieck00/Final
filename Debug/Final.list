
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080042c0  080042c0  000052c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044a8  080044a8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044a8  080044a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080044bc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080044bc  00006078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a585  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  000105c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00012080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  00012c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d554  00000000  00000000  000135df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf7c  00000000  00000000  00030b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf166  00000000  00000000  0003daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcc15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000fcc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0010022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042a8 	.word	0x080042a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080042a8 	.word	0x080042a8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_GPIO_Init+0x78>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <MX_GPIO_Init+0x78>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_GPIO_Init+0x78>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_GPIO_Init+0x78>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a11      	ldr	r2, [pc, #68]	@ (80009bc <MX_GPIO_Init+0x78>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_GPIO_Init+0x78>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000992:	f000 fdc5 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000996:	2310      	movs	r3, #16
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b0:	f000 fc34 	bl	800121c <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000

080009c0 <SetPWM.1>:
  uint32_t PhaseB2;
  int32_t AA;
  int32_t BB;


  void SetPWM(int32_t A, int32_t B){
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4663      	mov	r3, ip
 80009cc:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(A>0){PhaseA=A;PhaseA2=0;}
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	dd04      	ble.n	80009e0 <SetPWM.1+0x20>
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	e006      	b.n	80009ee <SetPWM.1+0x2e>
	  else{PhaseA=0;PhaseA2=abs(A);}
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	bfb8      	it	lt
 80009ea:	4252      	neglt	r2, r2
 80009ec:	611a      	str	r2, [r3, #16]
	  if(B>0){PhaseB=B;PhaseB2=0;}
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	dd04      	ble.n	80009fe <SetPWM.1+0x3e>
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	e006      	b.n	8000a0c <SetPWM.1+0x4c>
	  else{PhaseB=0;PhaseB2=abs(B);}
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	bfb8      	it	lt
 8000a08:	4252      	neglt	r2, r2
 8000a0a:	609a      	str	r2, [r3, #8]
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PhaseA);
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SetPWM.1+0x78>)
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	6959      	ldr	r1, [r3, #20]
 8000a12:	6351      	str	r1, [r2, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,PhaseA2);
 8000a14:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <SetPWM.1+0x78>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	6919      	ldr	r1, [r3, #16]
 8000a1a:	6391      	str	r1, [r2, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,PhaseB);
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <SetPWM.1+0x78>)
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	68d9      	ldr	r1, [r3, #12]
 8000a22:	63d1      	str	r1, [r2, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,PhaseB2);
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <SetPWM.1+0x78>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20000028 	.word	0x20000028

08000a3c <main>:
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
int main(void)
 8000a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a46:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 8000a48:	f000 fa71 	bl	8000f2e <HAL_Init>
  SystemClock_Config();
 8000a4c:	f000 f88e 	bl	8000b6c <SystemClock_Config>
  MX_GPIO_Init();
 8000a50:	f7ff ff78 	bl	8000944 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a54:	f000 f936 	bl	8000cc4 <MX_TIM2_Init>
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <main+0x68>)
 8000a5c:	f002 fa16 	bl	8002e8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_2);
 8000a60:	2104      	movs	r1, #4
 8000a62:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <main+0x68>)
 8000a64:	f002 fa12 	bl	8002e8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_3);
 8000a68:	2108      	movs	r1, #8
 8000a6a:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <main+0x68>)
 8000a6c:	f002 fa0e 	bl	8002e8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_4);
 8000a70:	210c      	movs	r1, #12
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <main+0x68>)
 8000a74:	f002 fa0a 	bl	8002e8c <HAL_TIMEx_PWMN_Start>
  int pulse=0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pulse++;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
	  if(pulse>360){pulse=-360;}
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000a88:	dd01      	ble.n	8000a8e <main+0x52>
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <main+0x6c>)
 8000a8c:	61fb      	str	r3, [r7, #28]
	  SetAngle(pulse);
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	463a      	mov	r2, r7
 8000a94:	4694      	mov	ip, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f80a 	bl	8000ab0 <SetAngle.0>
	  HAL_Delay(10);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f000 fab7 	bl	8001010 <HAL_Delay>
	  pulse++;
 8000aa2:	e7eb      	b.n	8000a7c <main+0x40>
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	fffffe98 	.word	0xfffffe98
 8000aac:	00000000 	.word	0x00000000

08000ab0 <SetAngle.0>:
  void SetAngle(uint16_t Angle){
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4664      	mov	r4, ip
 8000abc:	f8c7 c000 	str.w	ip, [r7]
	  AA=sin(Angle* (M_PI / 180.0))*pow(2, 10);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe24 	bl	8000710 <__aeabi_i2d>
 8000ac8:	a325      	add	r3, pc, #148	@ (adr r3, 8000b60 <SetAngle.0+0xb0>)
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f7ff fba3 	bl	8000218 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	ec43 2b17 	vmov	d7, r2, r3
 8000ada:	eeb0 0a47 	vmov.f32	s0, s14
 8000ade:	eef0 0a67 	vmov.f32	s1, s15
 8000ae2:	f002 fbb1 	bl	8003248 <sin>
 8000ae6:	ec51 0b10 	vmov	r0, r1, d0
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <SetAngle.0+0xb8>)
 8000af0:	f7ff fb92 	bl	8000218 <__aeabi_dmul>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	4610      	mov	r0, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	f7ff fefa 	bl	80008f4 <__aeabi_d2iz>
 8000b00:	4603      	mov	r3, r0
 8000b02:	6063      	str	r3, [r4, #4]
	  BB=cos(Angle* (M_PI / 180.0))*pow(2, 10);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe02 	bl	8000710 <__aeabi_i2d>
 8000b0c:	a314      	add	r3, pc, #80	@ (adr r3, 8000b60 <SetAngle.0+0xb0>)
 8000b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b12:	f7ff fb81 	bl	8000218 <__aeabi_dmul>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	ec43 2b17 	vmov	d7, r2, r3
 8000b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b22:	eef0 0a67 	vmov.f32	s1, s15
 8000b26:	f002 fb3b 	bl	80031a0 <cos>
 8000b2a:	ec51 0b10 	vmov	r0, r1, d0
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <SetAngle.0+0xb8>)
 8000b34:	f7ff fb70 	bl	8000218 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f7ff fed8 	bl	80008f4 <__aeabi_d2iz>
 8000b44:	4603      	mov	r3, r0
 8000b46:	6023      	str	r3, [r4, #0]
	  SetPWM(AA,BB);
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	46a4      	mov	ip, r4
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff35 	bl	80009c0 <SetPWM.1>
  }
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	a2529d39 	.word	0xa2529d39
 8000b64:	3f91df46 	.word	0x3f91df46
 8000b68:	40900000 	.word	0x40900000

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	@ 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	2238      	movs	r2, #56	@ 0x38
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fae1 	bl	8003142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b92:	f000 fcdd 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2340      	movs	r3, #64	@ 0x40
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fd83 	bl	80016b8 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bb8:	f000 f818 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f881 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000be0:	f000 f804 	bl	8000bec <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3750      	adds	r7, #80	@ 0x50
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c2e:	f000 fd33 	bl	8001698 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f99d 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b38      	ldr	r3, [pc, #224]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1e:	4835      	ldr	r0, [pc, #212]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d20:	f001 f9c0 	bl	80020a4 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f7ff ff5f 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482e      	ldr	r0, [pc, #184]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d3c:	f001 fb7e 	bl	800243c <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d46:	f7ff ff51 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d4a:	482a      	ldr	r0, [pc, #168]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d4c:	f001 fa01 	bl	8002152 <HAL_TIM_PWM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d56:	f7ff ff49 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d6a:	f002 f943 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d74:	f7ff ff3a 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d78:	2360      	movs	r3, #96	@ 0x60
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8000d7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4818      	ldr	r0, [pc, #96]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000d92:	f001 fa3f 	bl	8002214 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d9c:	f7ff ff26 	bl	8000bec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2204      	movs	r2, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000dac:	f001 fa32 	bl	8002214 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000db6:	f7ff ff19 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000dc2:	f001 fa27 	bl	8002214 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 8000dcc:	f7ff ff0e 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000dd8:	f001 fa1c 	bl	8002214 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000de2:	f7ff ff03 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <MX_TIM2_Init+0x130>)
 8000de8:	f000 f824 	bl	8000e34 <HAL_TIM_MspPostInit>

}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	@ 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000028 	.word	0x20000028

08000df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e08:	d10b      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_TIM_Base_MspInit+0x38>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <HAL_TIM_Base_MspInit+0x38>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_TIM_Base_MspInit+0x38>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e54:	d139      	bne.n	8000eca <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a18      	ldr	r2, [pc, #96]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_TIM_MspPostInit+0xa0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e86:	2303      	movs	r3, #3
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e96:	2301      	movs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f000 f9ba 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ea8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <HAL_TIM_MspPostInit+0xa4>)
 8000ec6:	f000 f9a9 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff fede 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f002 f923 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fd95 	bl	8000a3c <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f20:	080044b0 	.word	0x080044b0
  ldr r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f28:	20000078 	.word	0x20000078

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>

08000f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f93d 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f80e 	bl	8000f60 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff fe52 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]

}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d022      	beq.n	8000fba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_InitTick+0x6c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f93a 	bl	8001202 <HAL_SYSTICK_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10f      	bne.n	8000fb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d809      	bhi.n	8000fae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa2:	f000 f914 	bl	80011ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0x70>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e004      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000074 	.word	0x20000074
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000074 	.word	0x20000074

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d004      	beq.n	8001034 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_Delay+0x40>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001034:	bf00      	nop
 8001036:	f7ff ffdf 	bl	8000ff8 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	429a      	cmp	r2, r3
 8001044:	d8f7      	bhi.n	8001036 <HAL_Delay+0x26>
  {
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	@ (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	@ (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	@ 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff47 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff5e 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff90 	bl	800110c <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5f 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffb2 	bl	8001174 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800122a:	e15a      	b.n	80014e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 814c 	beq.w	80014dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d005      	beq.n	800125c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001258:	2b02      	cmp	r3, #2
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 0201 	and.w	r2, r3, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d017      	beq.n	80012fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0203 	and.w	r2, r3, #3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a6 	beq.w	80014dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_GPIO_Init+0x2e4>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001394:	4a5a      	ldr	r2, [pc, #360]	@ (8001500 <HAL_GPIO_Init+0x2e4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6613      	str	r3, [r2, #96]	@ 0x60
 800139c:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <HAL_GPIO_Init+0x2e4>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a8:	4a56      	ldr	r2, [pc, #344]	@ (8001504 <HAL_GPIO_Init+0x2e8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013d2:	d01f      	beq.n	8001414 <HAL_GPIO_Init+0x1f8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d019      	beq.n	8001410 <HAL_GPIO_Init+0x1f4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_GPIO_Init+0x2f0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1f0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001510 <HAL_GPIO_Init+0x2f4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1ec>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a49      	ldr	r2, [pc, #292]	@ (8001514 <HAL_GPIO_Init+0x2f8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a48      	ldr	r2, [pc, #288]	@ (8001518 <HAL_GPIO_Init+0x2fc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e4>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e00a      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001400:	2306      	movs	r3, #6
 8001402:	e008      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001404:	2304      	movs	r3, #4
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001408:	2303      	movs	r3, #3
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001414:	2300      	movs	r3, #0
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001426:	4937      	ldr	r1, [pc, #220]	@ (8001504 <HAL_GPIO_Init+0x2e8>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_GPIO_Init+0x300>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001458:	4a30      	ldr	r2, [pc, #192]	@ (800151c <HAL_GPIO_Init+0x300>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800145e:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <HAL_GPIO_Init+0x300>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001482:	4a26      	ldr	r2, [pc, #152]	@ (800151c <HAL_GPIO_Init+0x300>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <HAL_GPIO_Init+0x300>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <HAL_GPIO_Init+0x300>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <HAL_GPIO_Init+0x300>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d6:	4a11      	ldr	r2, [pc, #68]	@ (800151c <HAL_GPIO_Init+0x300>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f ae9d 	bne.w	800122c <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	48001000 	.word	0x48001000
 8001518:	48001400 	.word	0x48001400
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d141      	bne.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156a:	d131      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001572:	4a46      	ldr	r2, [pc, #280]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	4b43      	ldr	r3, [pc, #268]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001584:	4a41      	ldr	r2, [pc, #260]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800158c:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2232      	movs	r2, #50	@ 0x32
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a2:	e002      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d102      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ca:	d158      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e057      	b.n	8001680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d0:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d6:	4a2d      	ldr	r2, [pc, #180]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015e0:	e04d      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015e8:	d141      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f6:	d131      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fe:	4a23      	ldr	r2, [pc, #140]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001610:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2232      	movs	r2, #50	@ 0x32
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162e:	e002      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3b01      	subs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001642:	d102      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f2      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001656:	d112      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e011      	b.n	8001680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800166c:	e007      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800167c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40007000 	.word	0x40007000
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a6:	6093      	str	r3, [r2, #8]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e2fe      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d075      	beq.n	80017c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b97      	ldr	r3, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b94      	ldr	r3, [pc, #592]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3e>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_OscConfig+0x44>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d05b      	beq.n	80017c0 <HAL_RCC_OscConfig+0x108>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d157      	bne.n	80017c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2d9      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x74>
 800171e:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a84      	ldr	r2, [pc, #528]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xb0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7f      	ldr	r3, [pc, #508]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7e      	ldr	r2, [pc, #504]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b7c      	ldr	r3, [pc, #496]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7b      	ldr	r2, [pc, #492]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xb0>
 8001750:	4b78      	ldr	r3, [pc, #480]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a77      	ldr	r2, [pc, #476]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a74      	ldr	r2, [pc, #464]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fc42 	bl	8000ff8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fc3e 	bl	8000ff8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	@ 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e29e      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	4b6a      	ldr	r3, [pc, #424]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xc0>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fc2e 	bl	8000ff8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fc2a 	bl	8000ff8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e28a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b2:	4b60      	ldr	r3, [pc, #384]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0xe8>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d075      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	4b56      	ldr	r3, [pc, #344]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0x136>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_OscConfig+0x13c>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d11f      	bne.n	8001834 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x154>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e25d      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b49      	ldr	r3, [pc, #292]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	4946      	ldr	r1, [pc, #280]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001820:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <HAL_RCC_OscConfig+0x280>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fb9b 	bl	8000f60 <HAL_InitTick>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e249      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d023      	beq.n	8001884 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b3d      	ldr	r3, [pc, #244]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a3c      	ldr	r2, [pc, #240]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fbd6 	bl	8000ff8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fbd2 	bl	8000ff8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e232      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	061b      	lsls	r3, r3, #24
 800187c:	492d      	ldr	r1, [pc, #180]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e01a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800188a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fbb2 	bl	8000ff8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fbae 	bl	8000ff8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e20e      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1e0>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d041      	beq.n	800194a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d01c      	beq.n	8001908 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fb8b 	bl	8000ff8 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fb87 	bl	8000ff8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1e7      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ef      	beq.n	80018e6 <HAL_RCC_OscConfig+0x22e>
 8001906:	e020      	b.n	800194a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb6e 	bl	8000ff8 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191e:	e00d      	b.n	800193c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff fb6a 	bl	8000ff8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d906      	bls.n	800193c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1ca      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ea      	bne.n	8001920 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80a6 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800195c:	4b84      	ldr	r3, [pc, #528]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x2b4>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x2b6>
 800196c:	2300      	movs	r3, #0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b7f      	ldr	r3, [pc, #508]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	4a7e      	ldr	r2, [pc, #504]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	@ 0x58
 800197e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198e:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <HAL_RCC_OscConfig+0x4bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800199a:	4b76      	ldr	r3, [pc, #472]	@ (8001b74 <HAL_RCC_OscConfig+0x4bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	@ (8001b74 <HAL_RCC_OscConfig+0x4bc>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fb27 	bl	8000ff8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff fb23 	bl	8000ff8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e183      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <HAL_RCC_OscConfig+0x4bc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0x32e>
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	4a65      	ldr	r2, [pc, #404]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e4:	e024      	b.n	8001a30 <HAL_RCC_OscConfig+0x378>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d110      	bne.n	8001a10 <HAL_RCC_OscConfig+0x358>
 80019ee:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a04:	4a5a      	ldr	r2, [pc, #360]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a0e:	e00f      	b.n	8001a30 <HAL_RCC_OscConfig+0x378>
 8001a10:	4b57      	ldr	r3, [pc, #348]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a56      	ldr	r2, [pc, #344]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a20:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a26:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d016      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fade 	bl	8000ff8 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fada 	bl	8000ff8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e138      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ed      	beq.n	8001a40 <HAL_RCC_OscConfig+0x388>
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff fac7 	bl	8000ff8 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fac3 	bl	8000ff8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e121      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a84:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ed      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	4a34      	ldr	r2, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001abe:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa96 	bl	8000ff8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad0:	f7ff fa92 	bl	8000ff8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0f2      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x418>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001af8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa79 	bl	8000ff8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0a:	f7ff fa75 	bl	8000ff8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0d5      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80c9 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	f000 8083 	beq.w	8001c48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d15e      	bne.n	8001c08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_RCC_OscConfig+0x4b8>)
 8001b50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff fa4f 	bl	8000ff8 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5c:	e00c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff fa4b 	bl	8000ff8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d905      	bls.n	8001b78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0ab      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	4b55      	ldr	r3, [pc, #340]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ec      	bne.n	8001b5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b52      	ldr	r3, [pc, #328]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <HAL_RCC_OscConfig+0x61c>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6a11      	ldr	r1, [r2, #32]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b9e:	0212      	lsls	r2, r2, #8
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ba6:	0852      	lsrs	r2, r2, #1
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0552      	lsls	r2, r2, #21
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bb2:	0852      	lsrs	r2, r2, #1
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0652      	lsls	r2, r2, #25
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bbe:	06d2      	lsls	r2, r2, #27
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4943      	ldr	r1, [pc, #268]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a40      	ldr	r2, [pc, #256]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fa0a 	bl	8000ff8 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fa06 	bl	8000ff8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e066      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x530>
 8001c06:	e05e      	b.n	8001cc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f9f0 	bl	8000ff8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f9ec 	bl	8000ff8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4924      	ldr	r1, [pc, #144]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60cb      	str	r3, [r1, #12]
 8001c46:	e03e      	b.n	8001cc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e039      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_RCC_OscConfig+0x618>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d12c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	3b01      	subs	r3, #1
 8001c74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d123      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d11b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d113      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	019f800c 	.word	0x019f800c
 8001cd8:	feeefffc 	.word	0xfeeefffc

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e11e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b91      	ldr	r3, [pc, #580]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b8e      	ldr	r3, [pc, #568]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 020f 	bic.w	r2, r3, #15
 8001d0a:	498c      	ldr	r1, [pc, #560]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b8a      	ldr	r3, [pc, #552]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e106      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d073      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d129      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d38:	4b81      	ldr	r3, [pc, #516]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0f4      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d48:	f000 f966 	bl	8002018 <RCC_GetSysClockFreqFromPLLSource>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4a7c      	ldr	r2, [pc, #496]	@ (8001f44 <HAL_RCC_ClockConfig+0x268>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d93f      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d56:	4b7a      	ldr	r3, [pc, #488]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d033      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12f      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d76:	4b72      	ldr	r3, [pc, #456]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d7e:	4a70      	ldr	r2, [pc, #448]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e024      	b.n	8001dd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d94:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0c6      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0be      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001db4:	f000 f8ce 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4a61      	ldr	r2, [pc, #388]	@ (8001f44 <HAL_RCC_ClockConfig+0x268>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d909      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dca:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4957      	ldr	r1, [pc, #348]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff f906 	bl	8000ff8 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff f902 	bl	8000ff8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e095      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b4e      	ldr	r3, [pc, #312]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b43      	ldr	r3, [pc, #268]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a42      	ldr	r2, [pc, #264]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e48:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e50:	4a3b      	ldr	r2, [pc, #236]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4936      	ldr	r1, [pc, #216]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b80      	cmp	r3, #128	@ 0x80
 8001e70:	d105      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e72:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001e78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d21d      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 020f 	bic.w	r2, r3, #15
 8001e94:	4929      	ldr	r1, [pc, #164]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff f8ac 	bl	8000ff8 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f8a8 	bl	8000ff8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e03b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1ed      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4917      	ldr	r1, [pc, #92]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	490f      	ldr	r1, [pc, #60]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f06:	f000 f825 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <HAL_RCC_ClockConfig+0x26c>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f818 	bl	8000f60 <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	04c4b400 	.word	0x04c4b400
 8001f48:	080042c0 	.word	0x080042c0
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f66:	4b2a      	ldr	r3, [pc, #168]	@ (8002010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e047      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f78:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e03e      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d136      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	0a12      	lsrs	r2, r2, #8
 8001fb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
      break;
 8001fc0:	e00c      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc2:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	0a12      	lsrs	r2, r2, #8
 8001fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
      break;
 8001fda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0e5b      	lsrs	r3, r3, #25
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e001      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ffc:	693b      	ldr	r3, [r7, #16]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d10c      	bne.n	8002056 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203c:	4a17      	ldr	r2, [pc, #92]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002046:	68d2      	ldr	r2, [r2, #12]
 8002048:	0a12      	lsrs	r2, r2, #8
 800204a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	617b      	str	r3, [r7, #20]
    break;
 8002054:	e00c      	b.n	8002070 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4a0e      	ldr	r2, [pc, #56]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002060:	68d2      	ldr	r2, [r2, #12]
 8002062:	0a12      	lsrs	r2, r2, #8
 8002064:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    break;
 800206e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0e5b      	lsrs	r3, r3, #25
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	3301      	adds	r3, #1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	00f42400 	.word	0x00f42400

080020a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e049      	b.n	800214a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fe94 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3304      	adds	r3, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f000 faa4 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e049      	b.n	80021f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d106      	bne.n	800217e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f841 	bl	8002200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f000 fa4d 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800222e:	2302      	movs	r3, #2
 8002230:	e0ff      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b14      	cmp	r3, #20
 800223e:	f200 80f0 	bhi.w	8002422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	0800229d 	.word	0x0800229d
 800224c:	08002423 	.word	0x08002423
 8002250:	08002423 	.word	0x08002423
 8002254:	08002423 	.word	0x08002423
 8002258:	080022dd 	.word	0x080022dd
 800225c:	08002423 	.word	0x08002423
 8002260:	08002423 	.word	0x08002423
 8002264:	08002423 	.word	0x08002423
 8002268:	0800231f 	.word	0x0800231f
 800226c:	08002423 	.word	0x08002423
 8002270:	08002423 	.word	0x08002423
 8002274:	08002423 	.word	0x08002423
 8002278:	0800235f 	.word	0x0800235f
 800227c:	08002423 	.word	0x08002423
 8002280:	08002423 	.word	0x08002423
 8002284:	08002423 	.word	0x08002423
 8002288:	080023a1 	.word	0x080023a1
 800228c:	08002423 	.word	0x08002423
 8002290:	08002423 	.word	0x08002423
 8002294:	08002423 	.word	0x08002423
 8002298:	080023e1 	.word	0x080023e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fa60 	bl	8002768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0208 	orr.w	r2, r2, #8
 80022b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0204 	bic.w	r2, r2, #4
 80022c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6999      	ldr	r1, [r3, #24]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	619a      	str	r2, [r3, #24]
      break;
 80022da:	e0a5      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fad0 	bl	8002888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6999      	ldr	r1, [r3, #24]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	021a      	lsls	r2, r3, #8
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	619a      	str	r2, [r3, #24]
      break;
 800231c:	e084      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fb39 	bl	800299c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0208 	orr.w	r2, r2, #8
 8002338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0204 	bic.w	r2, r2, #4
 8002348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69d9      	ldr	r1, [r3, #28]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	61da      	str	r2, [r3, #28]
      break;
 800235c:	e064      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fba1 	bl	8002aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69d9      	ldr	r1, [r3, #28]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	61da      	str	r2, [r3, #28]
      break;
 800239e:	e043      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fc0a 	bl	8002bc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0208 	orr.w	r2, r2, #8
 80023ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80023de:	e023      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fc4e 	bl	8002c88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	021a      	lsls	r2, r3, #8
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002420:	e002      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop

0800243c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x1c>
 8002454:	2302      	movs	r3, #2
 8002456:	e0de      	b.n	8002616 <HAL_TIM_ConfigClockSource+0x1da>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800247a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a63      	ldr	r2, [pc, #396]	@ (8002620 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	f000 80a9 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002498:	4a61      	ldr	r2, [pc, #388]	@ (8002620 <HAL_TIM_ConfigClockSource+0x1e4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	f200 80ae 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024a0:	4a60      	ldr	r2, [pc, #384]	@ (8002624 <HAL_TIM_ConfigClockSource+0x1e8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f000 80a1 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 80024a8:	4a5e      	ldr	r2, [pc, #376]	@ (8002624 <HAL_TIM_ConfigClockSource+0x1e8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	f200 80a6 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_TIM_ConfigClockSource+0x1ec>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f000 8099 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 80024b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002628 <HAL_TIM_ConfigClockSource+0x1ec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f200 809e 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024c0:	4a5a      	ldr	r2, [pc, #360]	@ (800262c <HAL_TIM_ConfigClockSource+0x1f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f000 8091 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 80024c8:	4a58      	ldr	r2, [pc, #352]	@ (800262c <HAL_TIM_ConfigClockSource+0x1f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f200 8096 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80024d4:	f000 8089 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 80024d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80024dc:	f200 808e 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024e4:	d03e      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0x128>
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ea:	f200 8087 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f2:	f000 8086 	beq.w	8002602 <HAL_TIM_ConfigClockSource+0x1c6>
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024fa:	d87f      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 80024fc:	2b70      	cmp	r3, #112	@ 0x70
 80024fe:	d01a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0xfa>
 8002500:	2b70      	cmp	r3, #112	@ 0x70
 8002502:	d87b      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002504:	2b60      	cmp	r3, #96	@ 0x60
 8002506:	d050      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x16e>
 8002508:	2b60      	cmp	r3, #96	@ 0x60
 800250a:	d877      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 800250c:	2b50      	cmp	r3, #80	@ 0x50
 800250e:	d03c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x14e>
 8002510:	2b50      	cmp	r3, #80	@ 0x50
 8002512:	d873      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002514:	2b40      	cmp	r3, #64	@ 0x40
 8002516:	d058      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x18e>
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d86f      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 800251c:	2b30      	cmp	r3, #48	@ 0x30
 800251e:	d064      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002520:	2b30      	cmp	r3, #48	@ 0x30
 8002522:	d86b      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d060      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002528:	2b20      	cmp	r3, #32
 800252a:	d867      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05c      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002530:	2b10      	cmp	r3, #16
 8002532:	d05a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002534:	e062      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002546:	f000 fc81 	bl	8002e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002558:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	609a      	str	r2, [r3, #8]
      break;
 8002562:	e04f      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	f000 fc6a 	bl	8002e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e03c      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	461a      	mov	r2, r3
 8002598:	f000 fbdc 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2150      	movs	r1, #80	@ 0x50
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fc35 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e02c      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 fbfb 	bl	8002db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2160      	movs	r1, #96	@ 0x60
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fc25 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e01c      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fbbc 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fc15 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e00c      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f000 fc0c 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80025fa:	e003      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e000      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002602:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	00100070 	.word	0x00100070
 8002624:	00100040 	.word	0x00100040
 8002628:	00100030 	.word	0x00100030
 800262c:	00100020 	.word	0x00100020

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a42      	ldr	r2, [pc, #264]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00f      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264e:	d00b      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <TIM_Base_SetConfig+0x120>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3e      	ldr	r2, [pc, #248]	@ (8002754 <TIM_Base_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a33      	ldr	r2, [pc, #204]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01b      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002688:	d017      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a30      	ldr	r2, [pc, #192]	@ (8002750 <TIM_Base_SetConfig+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2f      	ldr	r2, [pc, #188]	@ (8002754 <TIM_Base_SetConfig+0x124>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00f      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2e      	ldr	r2, [pc, #184]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	@ (800275c <TIM_Base_SetConfig+0x12c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002760 <TIM_Base_SetConfig+0x130>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <TIM_Base_SetConfig+0x134>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d108      	bne.n	80026cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a16      	ldr	r2, [pc, #88]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a16      	ldr	r2, [pc, #88]	@ (800275c <TIM_Base_SetConfig+0x12c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <TIM_Base_SetConfig+0x130>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <TIM_Base_SetConfig+0x134>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
  }
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40013400 	.word	0x40013400
 800275c:	40014000 	.word	0x40014000
 8002760:	40014400 	.word	0x40014400
 8002764:	40014800 	.word	0x40014800

08002768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f023 0201 	bic.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <TIM_OC1_SetConfig+0x10c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00f      	beq.n	80027e8 <TIM_OC1_SetConfig+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <TIM_OC1_SetConfig+0x110>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_OC1_SetConfig+0x80>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <TIM_OC1_SetConfig+0x114>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_OC1_SetConfig+0x80>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a29      	ldr	r2, [pc, #164]	@ (8002880 <TIM_OC1_SetConfig+0x118>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_OC1_SetConfig+0x80>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a28      	ldr	r2, [pc, #160]	@ (8002884 <TIM_OC1_SetConfig+0x11c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10c      	bne.n	8002802 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f023 0308 	bic.w	r3, r3, #8
 80027ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <TIM_OC1_SetConfig+0x10c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00f      	beq.n	800282a <TIM_OC1_SetConfig+0xc2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <TIM_OC1_SetConfig+0x110>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <TIM_OC1_SetConfig+0xc2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <TIM_OC1_SetConfig+0x114>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <TIM_OC1_SetConfig+0xc2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <TIM_OC1_SetConfig+0x118>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_OC1_SetConfig+0xc2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <TIM_OC1_SetConfig+0x11c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40013400 	.word	0x40013400
 800287c:	40014000 	.word	0x40014000
 8002880:	40014400 	.word	0x40014400
 8002884:	40014800 	.word	0x40014800

08002888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 0210 	bic.w	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0320 	bic.w	r3, r3, #32
 80028d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <TIM_OC2_SetConfig+0x100>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC2_SetConfig+0x6c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a27      	ldr	r2, [pc, #156]	@ (800298c <TIM_OC2_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10d      	bne.n	8002910 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <TIM_OC2_SetConfig+0x100>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00f      	beq.n	8002938 <TIM_OC2_SetConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <TIM_OC2_SetConfig+0x104>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00b      	beq.n	8002938 <TIM_OC2_SetConfig+0xb0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1b      	ldr	r2, [pc, #108]	@ (8002990 <TIM_OC2_SetConfig+0x108>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_OC2_SetConfig+0xb0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a1a      	ldr	r2, [pc, #104]	@ (8002994 <TIM_OC2_SetConfig+0x10c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_OC2_SetConfig+0xb0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a19      	ldr	r2, [pc, #100]	@ (8002998 <TIM_OC2_SetConfig+0x110>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d113      	bne.n	8002960 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800293e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40013400 	.word	0x40013400
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800

0800299c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a27      	ldr	r2, [pc, #156]	@ (8002a98 <TIM_OC3_SetConfig+0xfc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_OC3_SetConfig+0x6a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <TIM_OC3_SetConfig+0x100>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10d      	bne.n	8002a22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <TIM_OC3_SetConfig+0xfc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00f      	beq.n	8002a4a <TIM_OC3_SetConfig+0xae>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a9c <TIM_OC3_SetConfig+0x100>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <TIM_OC3_SetConfig+0xae>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa0 <TIM_OC3_SetConfig+0x104>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <TIM_OC3_SetConfig+0xae>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	@ (8002aa4 <TIM_OC3_SetConfig+0x108>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_OC3_SetConfig+0xae>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a18      	ldr	r2, [pc, #96]	@ (8002aa8 <TIM_OC3_SetConfig+0x10c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d113      	bne.n	8002a72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40013400 	.word	0x40013400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800

08002aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a28      	ldr	r2, [pc, #160]	@ (8002bac <TIM_OC4_SetConfig+0x100>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC4_SetConfig+0x6c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a27      	ldr	r2, [pc, #156]	@ (8002bb0 <TIM_OC4_SetConfig+0x104>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a1d      	ldr	r2, [pc, #116]	@ (8002bac <TIM_OC4_SetConfig+0x100>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00f      	beq.n	8002b5c <TIM_OC4_SetConfig+0xb0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <TIM_OC4_SetConfig+0x104>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <TIM_OC4_SetConfig+0xb0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <TIM_OC4_SetConfig+0x108>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_OC4_SetConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <TIM_OC4_SetConfig+0x10c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_OC4_SetConfig+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a19      	ldr	r2, [pc, #100]	@ (8002bbc <TIM_OC4_SetConfig+0x110>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d113      	bne.n	8002b84 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40013400 	.word	0x40013400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800

08002bc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <TIM_OC5_SetConfig+0xb4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <TIM_OC5_SetConfig+0x7a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <TIM_OC5_SetConfig+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_OC5_SetConfig+0x7a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <TIM_OC5_SetConfig+0xbc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_OC5_SetConfig+0x7a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <TIM_OC5_SetConfig+0xc0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC5_SetConfig+0x7a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <TIM_OC5_SetConfig+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d109      	bne.n	8002c4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	621a      	str	r2, [r3, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800

08002c88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	051b      	lsls	r3, r3, #20
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <TIM_OC6_SetConfig+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00f      	beq.n	8002d04 <TIM_OC6_SetConfig+0x7c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a17      	ldr	r2, [pc, #92]	@ (8002d44 <TIM_OC6_SetConfig+0xbc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_OC6_SetConfig+0x7c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <TIM_OC6_SetConfig+0xc0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_OC6_SetConfig+0x7c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a15      	ldr	r2, [pc, #84]	@ (8002d4c <TIM_OC6_SetConfig+0xc4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_OC6_SetConfig+0x7c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	@ (8002d50 <TIM_OC6_SetConfig+0xc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40013400 	.word	0x40013400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40014400 	.word	0x40014400
 8002d50:	40014800 	.word	0x40014800

08002d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0201 	bic.w	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 030a 	bic.w	r3, r3, #10
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0210 	bic.w	r2, r3, #16
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	031b      	lsls	r3, r3, #12
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f043 0307 	orr.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	609a      	str	r2, [r3, #8]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIMEx_PWMN_Start+0x24>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e022      	b.n	8002ef6 <HAL_TIMEx_PWMN_Start+0x6a>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d109      	bne.n	8002eca <HAL_TIMEx_PWMN_Start+0x3e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e015      	b.n	8002ef6 <HAL_TIMEx_PWMN_Start+0x6a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIMEx_PWMN_Start+0x58>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e069      	b.n	8002fd2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIMEx_PWMN_Start+0x82>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0c:	e013      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIMEx_PWMN_Start+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIMEx_PWMN_Start+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f2c:	e003      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8da 	bl	80030f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a20      	ldr	r2, [pc, #128]	@ (8002fdc <HAL_TIMEx_PWMN_Start+0x150>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_TIMEx_PWMN_Start+0x104>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f66:	d013      	beq.n	8002f90 <HAL_TIMEx_PWMN_Start+0x104>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_TIMEx_PWMN_Start+0x154>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_TIMEx_PWMN_Start+0x104>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_TIMEx_PWMN_Start+0x158>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIMEx_PWMN_Start+0x104>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_TIMEx_PWMN_Start+0x104>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_TIMEx_PWMN_Start+0x160>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d115      	bne.n	8002fbc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <HAL_TIMEx_PWMN_Start+0x164>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d015      	beq.n	8002fce <HAL_TIMEx_PWMN_Start+0x142>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa8:	d011      	beq.n	8002fce <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fba:	e008      	b.n	8002fce <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e000      	b.n	8002fd0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40013400 	.word	0x40013400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	00010007 	.word	0x00010007

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e065      	b.n	80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d108      	bne.n	8003052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1b      	ldr	r2, [pc, #108]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003082:	d013      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a17      	ldr	r2, [pc, #92]	@ (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a12      	ldr	r2, [pc, #72]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d10c      	bne.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40014000 	.word	0x40014000

080030f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	2204      	movs	r2, #4
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <memset>:
 8003142:	4402      	add	r2, r0
 8003144:	4603      	mov	r3, r0
 8003146:	4293      	cmp	r3, r2
 8003148:	d100      	bne.n	800314c <memset+0xa>
 800314a:	4770      	bx	lr
 800314c:	f803 1b01 	strb.w	r1, [r3], #1
 8003150:	e7f9      	b.n	8003146 <memset+0x4>
	...

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4d0d      	ldr	r5, [pc, #52]	@ (800318c <__libc_init_array+0x38>)
 8003158:	4c0d      	ldr	r4, [pc, #52]	@ (8003190 <__libc_init_array+0x3c>)
 800315a:	1b64      	subs	r4, r4, r5
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	2600      	movs	r6, #0
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	4d0b      	ldr	r5, [pc, #44]	@ (8003194 <__libc_init_array+0x40>)
 8003166:	4c0c      	ldr	r4, [pc, #48]	@ (8003198 <__libc_init_array+0x44>)
 8003168:	f001 f89e 	bl	80042a8 <_init>
 800316c:	1b64      	subs	r4, r4, r5
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	2600      	movs	r6, #0
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	080044a8 	.word	0x080044a8
 8003190:	080044a8 	.word	0x080044a8
 8003194:	080044a8 	.word	0x080044a8
 8003198:	080044ac 	.word	0x080044ac
 800319c:	00000000 	.word	0x00000000

080031a0 <cos>:
 80031a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031a2:	ec53 2b10 	vmov	r2, r3, d0
 80031a6:	4826      	ldr	r0, [pc, #152]	@ (8003240 <cos+0xa0>)
 80031a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80031ac:	4281      	cmp	r1, r0
 80031ae:	d806      	bhi.n	80031be <cos+0x1e>
 80031b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003238 <cos+0x98>
 80031b4:	b005      	add	sp, #20
 80031b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ba:	f000 b899 	b.w	80032f0 <__kernel_cos>
 80031be:	4821      	ldr	r0, [pc, #132]	@ (8003244 <cos+0xa4>)
 80031c0:	4281      	cmp	r1, r0
 80031c2:	d908      	bls.n	80031d6 <cos+0x36>
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f7fd f954 	bl	8000474 <__aeabi_dsub>
 80031cc:	ec41 0b10 	vmov	d0, r0, r1
 80031d0:	b005      	add	sp, #20
 80031d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80031d6:	4668      	mov	r0, sp
 80031d8:	f000 fa0e 	bl	80035f8 <__ieee754_rem_pio2>
 80031dc:	f000 0003 	and.w	r0, r0, #3
 80031e0:	2801      	cmp	r0, #1
 80031e2:	d00b      	beq.n	80031fc <cos+0x5c>
 80031e4:	2802      	cmp	r0, #2
 80031e6:	d015      	beq.n	8003214 <cos+0x74>
 80031e8:	b9d8      	cbnz	r0, 8003222 <cos+0x82>
 80031ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80031ee:	ed9d 0b00 	vldr	d0, [sp]
 80031f2:	f000 f87d 	bl	80032f0 <__kernel_cos>
 80031f6:	ec51 0b10 	vmov	r0, r1, d0
 80031fa:	e7e7      	b.n	80031cc <cos+0x2c>
 80031fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003200:	ed9d 0b00 	vldr	d0, [sp]
 8003204:	f000 f93c 	bl	8003480 <__kernel_sin>
 8003208:	ec53 2b10 	vmov	r2, r3, d0
 800320c:	4610      	mov	r0, r2
 800320e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003212:	e7db      	b.n	80031cc <cos+0x2c>
 8003214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003218:	ed9d 0b00 	vldr	d0, [sp]
 800321c:	f000 f868 	bl	80032f0 <__kernel_cos>
 8003220:	e7f2      	b.n	8003208 <cos+0x68>
 8003222:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003226:	ed9d 0b00 	vldr	d0, [sp]
 800322a:	2001      	movs	r0, #1
 800322c:	f000 f928 	bl	8003480 <__kernel_sin>
 8003230:	e7e1      	b.n	80031f6 <cos+0x56>
 8003232:	bf00      	nop
 8003234:	f3af 8000 	nop.w
	...
 8003240:	3fe921fb 	.word	0x3fe921fb
 8003244:	7fefffff 	.word	0x7fefffff

08003248 <sin>:
 8003248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800324a:	ec53 2b10 	vmov	r2, r3, d0
 800324e:	4826      	ldr	r0, [pc, #152]	@ (80032e8 <sin+0xa0>)
 8003250:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003254:	4281      	cmp	r1, r0
 8003256:	d807      	bhi.n	8003268 <sin+0x20>
 8003258:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80032e0 <sin+0x98>
 800325c:	2000      	movs	r0, #0
 800325e:	b005      	add	sp, #20
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	f000 b90c 	b.w	8003480 <__kernel_sin>
 8003268:	4820      	ldr	r0, [pc, #128]	@ (80032ec <sin+0xa4>)
 800326a:	4281      	cmp	r1, r0
 800326c:	d908      	bls.n	8003280 <sin+0x38>
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7fd f8ff 	bl	8000474 <__aeabi_dsub>
 8003276:	ec41 0b10 	vmov	d0, r0, r1
 800327a:	b005      	add	sp, #20
 800327c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003280:	4668      	mov	r0, sp
 8003282:	f000 f9b9 	bl	80035f8 <__ieee754_rem_pio2>
 8003286:	f000 0003 	and.w	r0, r0, #3
 800328a:	2801      	cmp	r0, #1
 800328c:	d00c      	beq.n	80032a8 <sin+0x60>
 800328e:	2802      	cmp	r0, #2
 8003290:	d011      	beq.n	80032b6 <sin+0x6e>
 8003292:	b9e8      	cbnz	r0, 80032d0 <sin+0x88>
 8003294:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003298:	ed9d 0b00 	vldr	d0, [sp]
 800329c:	2001      	movs	r0, #1
 800329e:	f000 f8ef 	bl	8003480 <__kernel_sin>
 80032a2:	ec51 0b10 	vmov	r0, r1, d0
 80032a6:	e7e6      	b.n	8003276 <sin+0x2e>
 80032a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80032ac:	ed9d 0b00 	vldr	d0, [sp]
 80032b0:	f000 f81e 	bl	80032f0 <__kernel_cos>
 80032b4:	e7f5      	b.n	80032a2 <sin+0x5a>
 80032b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80032ba:	ed9d 0b00 	vldr	d0, [sp]
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 f8de 	bl	8003480 <__kernel_sin>
 80032c4:	ec53 2b10 	vmov	r2, r3, d0
 80032c8:	4610      	mov	r0, r2
 80032ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80032ce:	e7d2      	b.n	8003276 <sin+0x2e>
 80032d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80032d4:	ed9d 0b00 	vldr	d0, [sp]
 80032d8:	f000 f80a 	bl	80032f0 <__kernel_cos>
 80032dc:	e7f2      	b.n	80032c4 <sin+0x7c>
 80032de:	bf00      	nop
	...
 80032e8:	3fe921fb 	.word	0x3fe921fb
 80032ec:	7fefffff 	.word	0x7fefffff

080032f0 <__kernel_cos>:
 80032f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	ec57 6b10 	vmov	r6, r7, d0
 80032f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80032fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003300:	ed8d 1b00 	vstr	d1, [sp]
 8003304:	d206      	bcs.n	8003314 <__kernel_cos+0x24>
 8003306:	4630      	mov	r0, r6
 8003308:	4639      	mov	r1, r7
 800330a:	f7fd faf3 	bl	80008f4 <__aeabi_d2iz>
 800330e:	2800      	cmp	r0, #0
 8003310:	f000 8088 	beq.w	8003424 <__kernel_cos+0x134>
 8003314:	4632      	mov	r2, r6
 8003316:	463b      	mov	r3, r7
 8003318:	4630      	mov	r0, r6
 800331a:	4639      	mov	r1, r7
 800331c:	f7fc ff7c 	bl	8000218 <__aeabi_dmul>
 8003320:	4b51      	ldr	r3, [pc, #324]	@ (8003468 <__kernel_cos+0x178>)
 8003322:	2200      	movs	r2, #0
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	f7fc ff76 	bl	8000218 <__aeabi_dmul>
 800332c:	a340      	add	r3, pc, #256	@ (adr r3, 8003430 <__kernel_cos+0x140>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	4682      	mov	sl, r0
 8003334:	468b      	mov	fp, r1
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f7fc ff6d 	bl	8000218 <__aeabi_dmul>
 800333e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003438 <__kernel_cos+0x148>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd f898 	bl	8000478 <__adddf3>
 8003348:	4622      	mov	r2, r4
 800334a:	462b      	mov	r3, r5
 800334c:	f7fc ff64 	bl	8000218 <__aeabi_dmul>
 8003350:	a33b      	add	r3, pc, #236	@ (adr r3, 8003440 <__kernel_cos+0x150>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f7fd f88d 	bl	8000474 <__aeabi_dsub>
 800335a:	4622      	mov	r2, r4
 800335c:	462b      	mov	r3, r5
 800335e:	f7fc ff5b 	bl	8000218 <__aeabi_dmul>
 8003362:	a339      	add	r3, pc, #228	@ (adr r3, 8003448 <__kernel_cos+0x158>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f886 	bl	8000478 <__adddf3>
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	f7fc ff52 	bl	8000218 <__aeabi_dmul>
 8003374:	a336      	add	r3, pc, #216	@ (adr r3, 8003450 <__kernel_cos+0x160>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f87b 	bl	8000474 <__aeabi_dsub>
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f7fc ff49 	bl	8000218 <__aeabi_dmul>
 8003386:	a334      	add	r3, pc, #208	@ (adr r3, 8003458 <__kernel_cos+0x168>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fd f874 	bl	8000478 <__adddf3>
 8003390:	4622      	mov	r2, r4
 8003392:	462b      	mov	r3, r5
 8003394:	f7fc ff40 	bl	8000218 <__aeabi_dmul>
 8003398:	4622      	mov	r2, r4
 800339a:	462b      	mov	r3, r5
 800339c:	f7fc ff3c 	bl	8000218 <__aeabi_dmul>
 80033a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033a4:	4604      	mov	r4, r0
 80033a6:	460d      	mov	r5, r1
 80033a8:	4630      	mov	r0, r6
 80033aa:	4639      	mov	r1, r7
 80033ac:	f7fc ff34 	bl	8000218 <__aeabi_dmul>
 80033b0:	460b      	mov	r3, r1
 80033b2:	4602      	mov	r2, r0
 80033b4:	4629      	mov	r1, r5
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7fd f85c 	bl	8000474 <__aeabi_dsub>
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <__kernel_cos+0x17c>)
 80033be:	4598      	cmp	r8, r3
 80033c0:	4606      	mov	r6, r0
 80033c2:	460f      	mov	r7, r1
 80033c4:	d810      	bhi.n	80033e8 <__kernel_cos+0xf8>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4650      	mov	r0, sl
 80033cc:	4659      	mov	r1, fp
 80033ce:	f7fd f851 	bl	8000474 <__aeabi_dsub>
 80033d2:	460b      	mov	r3, r1
 80033d4:	4926      	ldr	r1, [pc, #152]	@ (8003470 <__kernel_cos+0x180>)
 80033d6:	4602      	mov	r2, r0
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd f84b 	bl	8000474 <__aeabi_dsub>
 80033de:	ec41 0b10 	vmov	d0, r0, r1
 80033e2:	b003      	add	sp, #12
 80033e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e8:	4b22      	ldr	r3, [pc, #136]	@ (8003474 <__kernel_cos+0x184>)
 80033ea:	4921      	ldr	r1, [pc, #132]	@ (8003470 <__kernel_cos+0x180>)
 80033ec:	4598      	cmp	r8, r3
 80033ee:	bf8c      	ite	hi
 80033f0:	4d21      	ldrhi	r5, [pc, #132]	@ (8003478 <__kernel_cos+0x188>)
 80033f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80033f6:	2400      	movs	r4, #0
 80033f8:	4622      	mov	r2, r4
 80033fa:	462b      	mov	r3, r5
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fd f839 	bl	8000474 <__aeabi_dsub>
 8003402:	4622      	mov	r2, r4
 8003404:	4680      	mov	r8, r0
 8003406:	4689      	mov	r9, r1
 8003408:	462b      	mov	r3, r5
 800340a:	4650      	mov	r0, sl
 800340c:	4659      	mov	r1, fp
 800340e:	f7fd f831 	bl	8000474 <__aeabi_dsub>
 8003412:	4632      	mov	r2, r6
 8003414:	463b      	mov	r3, r7
 8003416:	f7fd f82d 	bl	8000474 <__aeabi_dsub>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4640      	mov	r0, r8
 8003420:	4649      	mov	r1, r9
 8003422:	e7da      	b.n	80033da <__kernel_cos+0xea>
 8003424:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003460 <__kernel_cos+0x170>
 8003428:	e7db      	b.n	80033e2 <__kernel_cos+0xf2>
 800342a:	bf00      	nop
 800342c:	f3af 8000 	nop.w
 8003430:	be8838d4 	.word	0xbe8838d4
 8003434:	bda8fae9 	.word	0xbda8fae9
 8003438:	bdb4b1c4 	.word	0xbdb4b1c4
 800343c:	3e21ee9e 	.word	0x3e21ee9e
 8003440:	809c52ad 	.word	0x809c52ad
 8003444:	3e927e4f 	.word	0x3e927e4f
 8003448:	19cb1590 	.word	0x19cb1590
 800344c:	3efa01a0 	.word	0x3efa01a0
 8003450:	16c15177 	.word	0x16c15177
 8003454:	3f56c16c 	.word	0x3f56c16c
 8003458:	5555554c 	.word	0x5555554c
 800345c:	3fa55555 	.word	0x3fa55555
 8003460:	00000000 	.word	0x00000000
 8003464:	3ff00000 	.word	0x3ff00000
 8003468:	3fe00000 	.word	0x3fe00000
 800346c:	3fd33332 	.word	0x3fd33332
 8003470:	3ff00000 	.word	0x3ff00000
 8003474:	3fe90000 	.word	0x3fe90000
 8003478:	3fd20000 	.word	0x3fd20000
 800347c:	00000000 	.word	0x00000000

08003480 <__kernel_sin>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	ec55 4b10 	vmov	r4, r5, d0
 8003488:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800348c:	b085      	sub	sp, #20
 800348e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003492:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003496:	4680      	mov	r8, r0
 8003498:	d205      	bcs.n	80034a6 <__kernel_sin+0x26>
 800349a:	4620      	mov	r0, r4
 800349c:	4629      	mov	r1, r5
 800349e:	f7fd fa29 	bl	80008f4 <__aeabi_d2iz>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d052      	beq.n	800354c <__kernel_sin+0xcc>
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fc feb3 	bl	8000218 <__aeabi_dmul>
 80034b2:	4682      	mov	sl, r0
 80034b4:	468b      	mov	fp, r1
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fc feab 	bl	8000218 <__aeabi_dmul>
 80034c2:	a342      	add	r3, pc, #264	@ (adr r3, 80035cc <__kernel_sin+0x14c>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	e9cd 0100 	strd	r0, r1, [sp]
 80034cc:	4650      	mov	r0, sl
 80034ce:	4659      	mov	r1, fp
 80034d0:	f7fc fea2 	bl	8000218 <__aeabi_dmul>
 80034d4:	a33f      	add	r3, pc, #252	@ (adr r3, 80035d4 <__kernel_sin+0x154>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fc ffcb 	bl	8000474 <__aeabi_dsub>
 80034de:	4652      	mov	r2, sl
 80034e0:	465b      	mov	r3, fp
 80034e2:	f7fc fe99 	bl	8000218 <__aeabi_dmul>
 80034e6:	a33d      	add	r3, pc, #244	@ (adr r3, 80035dc <__kernel_sin+0x15c>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fc ffc4 	bl	8000478 <__adddf3>
 80034f0:	4652      	mov	r2, sl
 80034f2:	465b      	mov	r3, fp
 80034f4:	f7fc fe90 	bl	8000218 <__aeabi_dmul>
 80034f8:	a33a      	add	r3, pc, #232	@ (adr r3, 80035e4 <__kernel_sin+0x164>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fc ffb9 	bl	8000474 <__aeabi_dsub>
 8003502:	4652      	mov	r2, sl
 8003504:	465b      	mov	r3, fp
 8003506:	f7fc fe87 	bl	8000218 <__aeabi_dmul>
 800350a:	a338      	add	r3, pc, #224	@ (adr r3, 80035ec <__kernel_sin+0x16c>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fc ffb2 	bl	8000478 <__adddf3>
 8003514:	4606      	mov	r6, r0
 8003516:	460f      	mov	r7, r1
 8003518:	f1b8 0f00 	cmp.w	r8, #0
 800351c:	d11b      	bne.n	8003556 <__kernel_sin+0xd6>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4650      	mov	r0, sl
 8003524:	4659      	mov	r1, fp
 8003526:	f7fc fe77 	bl	8000218 <__aeabi_dmul>
 800352a:	a325      	add	r3, pc, #148	@ (adr r3, 80035c0 <__kernel_sin+0x140>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f7fc ffa0 	bl	8000474 <__aeabi_dsub>
 8003534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003538:	f7fc fe6e 	bl	8000218 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	f7fc ff98 	bl	8000478 <__adddf3>
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	ec45 4b10 	vmov	d0, r4, r5
 8003550:	b005      	add	sp, #20
 8003552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800355a:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <__kernel_sin+0x148>)
 800355c:	2200      	movs	r2, #0
 800355e:	f7fc fe5b 	bl	8000218 <__aeabi_dmul>
 8003562:	4632      	mov	r2, r6
 8003564:	4680      	mov	r8, r0
 8003566:	4689      	mov	r9, r1
 8003568:	463b      	mov	r3, r7
 800356a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800356e:	f7fc fe53 	bl	8000218 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fc ff7b 	bl	8000474 <__aeabi_dsub>
 800357e:	4652      	mov	r2, sl
 8003580:	465b      	mov	r3, fp
 8003582:	f7fc fe49 	bl	8000218 <__aeabi_dmul>
 8003586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800358a:	f7fc ff73 	bl	8000474 <__aeabi_dsub>
 800358e:	a30c      	add	r3, pc, #48	@ (adr r3, 80035c0 <__kernel_sin+0x140>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	4606      	mov	r6, r0
 8003596:	460f      	mov	r7, r1
 8003598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800359c:	f7fc fe3c 	bl	8000218 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4630      	mov	r0, r6
 80035a6:	4639      	mov	r1, r7
 80035a8:	f7fc ff66 	bl	8000478 <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4620      	mov	r0, r4
 80035b2:	4629      	mov	r1, r5
 80035b4:	f7fc ff5e 	bl	8000474 <__aeabi_dsub>
 80035b8:	e7c6      	b.n	8003548 <__kernel_sin+0xc8>
 80035ba:	bf00      	nop
 80035bc:	f3af 8000 	nop.w
 80035c0:	55555549 	.word	0x55555549
 80035c4:	3fc55555 	.word	0x3fc55555
 80035c8:	3fe00000 	.word	0x3fe00000
 80035cc:	5acfd57c 	.word	0x5acfd57c
 80035d0:	3de5d93a 	.word	0x3de5d93a
 80035d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80035d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80035dc:	57b1fe7d 	.word	0x57b1fe7d
 80035e0:	3ec71de3 	.word	0x3ec71de3
 80035e4:	19c161d5 	.word	0x19c161d5
 80035e8:	3f2a01a0 	.word	0x3f2a01a0
 80035ec:	1110f8a6 	.word	0x1110f8a6
 80035f0:	3f811111 	.word	0x3f811111
 80035f4:	00000000 	.word	0x00000000

080035f8 <__ieee754_rem_pio2>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	ec57 6b10 	vmov	r6, r7, d0
 8003600:	4bc5      	ldr	r3, [pc, #788]	@ (8003918 <__ieee754_rem_pio2+0x320>)
 8003602:	b08d      	sub	sp, #52	@ 0x34
 8003604:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003608:	4598      	cmp	r8, r3
 800360a:	4604      	mov	r4, r0
 800360c:	9704      	str	r7, [sp, #16]
 800360e:	d807      	bhi.n	8003620 <__ieee754_rem_pio2+0x28>
 8003610:	2200      	movs	r2, #0
 8003612:	2300      	movs	r3, #0
 8003614:	ed80 0b00 	vstr	d0, [r0]
 8003618:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800361c:	2500      	movs	r5, #0
 800361e:	e028      	b.n	8003672 <__ieee754_rem_pio2+0x7a>
 8003620:	4bbe      	ldr	r3, [pc, #760]	@ (800391c <__ieee754_rem_pio2+0x324>)
 8003622:	4598      	cmp	r8, r3
 8003624:	d878      	bhi.n	8003718 <__ieee754_rem_pio2+0x120>
 8003626:	9b04      	ldr	r3, [sp, #16]
 8003628:	4dbd      	ldr	r5, [pc, #756]	@ (8003920 <__ieee754_rem_pio2+0x328>)
 800362a:	2b00      	cmp	r3, #0
 800362c:	4630      	mov	r0, r6
 800362e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80038e0 <__ieee754_rem_pio2+0x2e8>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	4639      	mov	r1, r7
 8003636:	dd38      	ble.n	80036aa <__ieee754_rem_pio2+0xb2>
 8003638:	f7fc ff1c 	bl	8000474 <__aeabi_dsub>
 800363c:	45a8      	cmp	r8, r5
 800363e:	4606      	mov	r6, r0
 8003640:	460f      	mov	r7, r1
 8003642:	d01a      	beq.n	800367a <__ieee754_rem_pio2+0x82>
 8003644:	a3a8      	add	r3, pc, #672	@ (adr r3, 80038e8 <__ieee754_rem_pio2+0x2f0>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fc ff13 	bl	8000474 <__aeabi_dsub>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4680      	mov	r8, r0
 8003654:	4689      	mov	r9, r1
 8003656:	4630      	mov	r0, r6
 8003658:	4639      	mov	r1, r7
 800365a:	f7fc ff0b 	bl	8000474 <__aeabi_dsub>
 800365e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80038e8 <__ieee754_rem_pio2+0x2f0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ff06 	bl	8000474 <__aeabi_dsub>
 8003668:	e9c4 8900 	strd	r8, r9, [r4]
 800366c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003670:	2501      	movs	r5, #1
 8003672:	4628      	mov	r0, r5
 8003674:	b00d      	add	sp, #52	@ 0x34
 8003676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367a:	a39d      	add	r3, pc, #628	@ (adr r3, 80038f0 <__ieee754_rem_pio2+0x2f8>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc fef8 	bl	8000474 <__aeabi_dsub>
 8003684:	a39c      	add	r3, pc, #624	@ (adr r3, 80038f8 <__ieee754_rem_pio2+0x300>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	4606      	mov	r6, r0
 800368c:	460f      	mov	r7, r1
 800368e:	f7fc fef1 	bl	8000474 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4680      	mov	r8, r0
 8003698:	4689      	mov	r9, r1
 800369a:	4630      	mov	r0, r6
 800369c:	4639      	mov	r1, r7
 800369e:	f7fc fee9 	bl	8000474 <__aeabi_dsub>
 80036a2:	a395      	add	r3, pc, #596	@ (adr r3, 80038f8 <__ieee754_rem_pio2+0x300>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	e7dc      	b.n	8003664 <__ieee754_rem_pio2+0x6c>
 80036aa:	f7fc fee5 	bl	8000478 <__adddf3>
 80036ae:	45a8      	cmp	r8, r5
 80036b0:	4606      	mov	r6, r0
 80036b2:	460f      	mov	r7, r1
 80036b4:	d018      	beq.n	80036e8 <__ieee754_rem_pio2+0xf0>
 80036b6:	a38c      	add	r3, pc, #560	@ (adr r3, 80038e8 <__ieee754_rem_pio2+0x2f0>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fc fedc 	bl	8000478 <__adddf3>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4680      	mov	r8, r0
 80036c6:	4689      	mov	r9, r1
 80036c8:	4630      	mov	r0, r6
 80036ca:	4639      	mov	r1, r7
 80036cc:	f7fc fed2 	bl	8000474 <__aeabi_dsub>
 80036d0:	a385      	add	r3, pc, #532	@ (adr r3, 80038e8 <__ieee754_rem_pio2+0x2f0>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fc fecf 	bl	8000478 <__adddf3>
 80036da:	f04f 35ff 	mov.w	r5, #4294967295
 80036de:	e9c4 8900 	strd	r8, r9, [r4]
 80036e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036e6:	e7c4      	b.n	8003672 <__ieee754_rem_pio2+0x7a>
 80036e8:	a381      	add	r3, pc, #516	@ (adr r3, 80038f0 <__ieee754_rem_pio2+0x2f8>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc fec3 	bl	8000478 <__adddf3>
 80036f2:	a381      	add	r3, pc, #516	@ (adr r3, 80038f8 <__ieee754_rem_pio2+0x300>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	4606      	mov	r6, r0
 80036fa:	460f      	mov	r7, r1
 80036fc:	f7fc febc 	bl	8000478 <__adddf3>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4680      	mov	r8, r0
 8003706:	4689      	mov	r9, r1
 8003708:	4630      	mov	r0, r6
 800370a:	4639      	mov	r1, r7
 800370c:	f7fc feb2 	bl	8000474 <__aeabi_dsub>
 8003710:	a379      	add	r3, pc, #484	@ (adr r3, 80038f8 <__ieee754_rem_pio2+0x300>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	e7de      	b.n	80036d6 <__ieee754_rem_pio2+0xde>
 8003718:	4b82      	ldr	r3, [pc, #520]	@ (8003924 <__ieee754_rem_pio2+0x32c>)
 800371a:	4598      	cmp	r8, r3
 800371c:	f200 80d1 	bhi.w	80038c2 <__ieee754_rem_pio2+0x2ca>
 8003720:	f000 f966 	bl	80039f0 <fabs>
 8003724:	ec57 6b10 	vmov	r6, r7, d0
 8003728:	a375      	add	r3, pc, #468	@ (adr r3, 8003900 <__ieee754_rem_pio2+0x308>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	4630      	mov	r0, r6
 8003730:	4639      	mov	r1, r7
 8003732:	f7fc fd71 	bl	8000218 <__aeabi_dmul>
 8003736:	4b7c      	ldr	r3, [pc, #496]	@ (8003928 <__ieee754_rem_pio2+0x330>)
 8003738:	2200      	movs	r2, #0
 800373a:	f7fc fe9d 	bl	8000478 <__adddf3>
 800373e:	f7fd f8d9 	bl	80008f4 <__aeabi_d2iz>
 8003742:	4605      	mov	r5, r0
 8003744:	f7fc ffe4 	bl	8000710 <__aeabi_i2d>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003750:	a363      	add	r3, pc, #396	@ (adr r3, 80038e0 <__ieee754_rem_pio2+0x2e8>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f7fc fd5f 	bl	8000218 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4630      	mov	r0, r6
 8003760:	4639      	mov	r1, r7
 8003762:	f7fc fe87 	bl	8000474 <__aeabi_dsub>
 8003766:	a360      	add	r3, pc, #384	@ (adr r3, 80038e8 <__ieee754_rem_pio2+0x2f0>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	4682      	mov	sl, r0
 800376e:	468b      	mov	fp, r1
 8003770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003774:	f7fc fd50 	bl	8000218 <__aeabi_dmul>
 8003778:	2d1f      	cmp	r5, #31
 800377a:	4606      	mov	r6, r0
 800377c:	460f      	mov	r7, r1
 800377e:	dc0c      	bgt.n	800379a <__ieee754_rem_pio2+0x1a2>
 8003780:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <__ieee754_rem_pio2+0x334>)
 8003782:	1e6a      	subs	r2, r5, #1
 8003784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003788:	4543      	cmp	r3, r8
 800378a:	d006      	beq.n	800379a <__ieee754_rem_pio2+0x1a2>
 800378c:	4632      	mov	r2, r6
 800378e:	463b      	mov	r3, r7
 8003790:	4650      	mov	r0, sl
 8003792:	4659      	mov	r1, fp
 8003794:	f7fc fe6e 	bl	8000474 <__aeabi_dsub>
 8003798:	e00e      	b.n	80037b8 <__ieee754_rem_pio2+0x1c0>
 800379a:	463b      	mov	r3, r7
 800379c:	4632      	mov	r2, r6
 800379e:	4650      	mov	r0, sl
 80037a0:	4659      	mov	r1, fp
 80037a2:	f7fc fe67 	bl	8000474 <__aeabi_dsub>
 80037a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	dc02      	bgt.n	80037be <__ieee754_rem_pio2+0x1c6>
 80037b8:	e9c4 0100 	strd	r0, r1, [r4]
 80037bc:	e039      	b.n	8003832 <__ieee754_rem_pio2+0x23a>
 80037be:	a34c      	add	r3, pc, #304	@ (adr r3, 80038f0 <__ieee754_rem_pio2+0x2f8>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037c8:	f7fc fd26 	bl	8000218 <__aeabi_dmul>
 80037cc:	4606      	mov	r6, r0
 80037ce:	460f      	mov	r7, r1
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4650      	mov	r0, sl
 80037d6:	4659      	mov	r1, fp
 80037d8:	f7fc fe4c 	bl	8000474 <__aeabi_dsub>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4680      	mov	r8, r0
 80037e2:	4689      	mov	r9, r1
 80037e4:	4650      	mov	r0, sl
 80037e6:	4659      	mov	r1, fp
 80037e8:	f7fc fe44 	bl	8000474 <__aeabi_dsub>
 80037ec:	4632      	mov	r2, r6
 80037ee:	463b      	mov	r3, r7
 80037f0:	f7fc fe40 	bl	8000474 <__aeabi_dsub>
 80037f4:	a340      	add	r3, pc, #256	@ (adr r3, 80038f8 <__ieee754_rem_pio2+0x300>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	4606      	mov	r6, r0
 80037fc:	460f      	mov	r7, r1
 80037fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003802:	f7fc fd09 	bl	8000218 <__aeabi_dmul>
 8003806:	4632      	mov	r2, r6
 8003808:	463b      	mov	r3, r7
 800380a:	f7fc fe33 	bl	8000474 <__aeabi_dsub>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4606      	mov	r6, r0
 8003814:	460f      	mov	r7, r1
 8003816:	4640      	mov	r0, r8
 8003818:	4649      	mov	r1, r9
 800381a:	f7fc fe2b 	bl	8000474 <__aeabi_dsub>
 800381e:	9a05      	ldr	r2, [sp, #20]
 8003820:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b31      	cmp	r3, #49	@ 0x31
 8003828:	dc20      	bgt.n	800386c <__ieee754_rem_pio2+0x274>
 800382a:	e9c4 0100 	strd	r0, r1, [r4]
 800382e:	46c2      	mov	sl, r8
 8003830:	46cb      	mov	fp, r9
 8003832:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003836:	4650      	mov	r0, sl
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	4659      	mov	r1, fp
 800383e:	f7fc fe19 	bl	8000474 <__aeabi_dsub>
 8003842:	463b      	mov	r3, r7
 8003844:	4632      	mov	r2, r6
 8003846:	f7fc fe15 	bl	8000474 <__aeabi_dsub>
 800384a:	9b04      	ldr	r3, [sp, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003852:	f6bf af0e 	bge.w	8003672 <__ieee754_rem_pio2+0x7a>
 8003856:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003860:	f8c4 8000 	str.w	r8, [r4]
 8003864:	60a0      	str	r0, [r4, #8]
 8003866:	60e3      	str	r3, [r4, #12]
 8003868:	426d      	negs	r5, r5
 800386a:	e702      	b.n	8003672 <__ieee754_rem_pio2+0x7a>
 800386c:	a326      	add	r3, pc, #152	@ (adr r3, 8003908 <__ieee754_rem_pio2+0x310>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003876:	f7fc fccf 	bl	8000218 <__aeabi_dmul>
 800387a:	4606      	mov	r6, r0
 800387c:	460f      	mov	r7, r1
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4640      	mov	r0, r8
 8003884:	4649      	mov	r1, r9
 8003886:	f7fc fdf5 	bl	8000474 <__aeabi_dsub>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4682      	mov	sl, r0
 8003890:	468b      	mov	fp, r1
 8003892:	4640      	mov	r0, r8
 8003894:	4649      	mov	r1, r9
 8003896:	f7fc fded 	bl	8000474 <__aeabi_dsub>
 800389a:	4632      	mov	r2, r6
 800389c:	463b      	mov	r3, r7
 800389e:	f7fc fde9 	bl	8000474 <__aeabi_dsub>
 80038a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003910 <__ieee754_rem_pio2+0x318>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	4606      	mov	r6, r0
 80038aa:	460f      	mov	r7, r1
 80038ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038b0:	f7fc fcb2 	bl	8000218 <__aeabi_dmul>
 80038b4:	4632      	mov	r2, r6
 80038b6:	463b      	mov	r3, r7
 80038b8:	f7fc fddc 	bl	8000474 <__aeabi_dsub>
 80038bc:	4606      	mov	r6, r0
 80038be:	460f      	mov	r7, r1
 80038c0:	e764      	b.n	800378c <__ieee754_rem_pio2+0x194>
 80038c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <__ieee754_rem_pio2+0x338>)
 80038c4:	4598      	cmp	r8, r3
 80038c6:	d935      	bls.n	8003934 <__ieee754_rem_pio2+0x33c>
 80038c8:	4632      	mov	r2, r6
 80038ca:	463b      	mov	r3, r7
 80038cc:	4630      	mov	r0, r6
 80038ce:	4639      	mov	r1, r7
 80038d0:	f7fc fdd0 	bl	8000474 <__aeabi_dsub>
 80038d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038d8:	e9c4 0100 	strd	r0, r1, [r4]
 80038dc:	e69e      	b.n	800361c <__ieee754_rem_pio2+0x24>
 80038de:	bf00      	nop
 80038e0:	54400000 	.word	0x54400000
 80038e4:	3ff921fb 	.word	0x3ff921fb
 80038e8:	1a626331 	.word	0x1a626331
 80038ec:	3dd0b461 	.word	0x3dd0b461
 80038f0:	1a600000 	.word	0x1a600000
 80038f4:	3dd0b461 	.word	0x3dd0b461
 80038f8:	2e037073 	.word	0x2e037073
 80038fc:	3ba3198a 	.word	0x3ba3198a
 8003900:	6dc9c883 	.word	0x6dc9c883
 8003904:	3fe45f30 	.word	0x3fe45f30
 8003908:	2e000000 	.word	0x2e000000
 800390c:	3ba3198a 	.word	0x3ba3198a
 8003910:	252049c1 	.word	0x252049c1
 8003914:	397b839a 	.word	0x397b839a
 8003918:	3fe921fb 	.word	0x3fe921fb
 800391c:	4002d97b 	.word	0x4002d97b
 8003920:	3ff921fb 	.word	0x3ff921fb
 8003924:	413921fb 	.word	0x413921fb
 8003928:	3fe00000 	.word	0x3fe00000
 800392c:	080042d0 	.word	0x080042d0
 8003930:	7fefffff 	.word	0x7fefffff
 8003934:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003938:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800393c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003940:	4630      	mov	r0, r6
 8003942:	460f      	mov	r7, r1
 8003944:	f7fc ffd6 	bl	80008f4 <__aeabi_d2iz>
 8003948:	f7fc fee2 	bl	8000710 <__aeabi_i2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4630      	mov	r0, r6
 8003952:	4639      	mov	r1, r7
 8003954:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003958:	f7fc fd8c 	bl	8000474 <__aeabi_dsub>
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <__ieee754_rem_pio2+0x3f0>)
 800395e:	2200      	movs	r2, #0
 8003960:	f7fc fc5a 	bl	8000218 <__aeabi_dmul>
 8003964:	460f      	mov	r7, r1
 8003966:	4606      	mov	r6, r0
 8003968:	f7fc ffc4 	bl	80008f4 <__aeabi_d2iz>
 800396c:	f7fc fed0 	bl	8000710 <__aeabi_i2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4630      	mov	r0, r6
 8003976:	4639      	mov	r1, r7
 8003978:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800397c:	f7fc fd7a 	bl	8000474 <__aeabi_dsub>
 8003980:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <__ieee754_rem_pio2+0x3f0>)
 8003982:	2200      	movs	r2, #0
 8003984:	f7fc fc48 	bl	8000218 <__aeabi_dmul>
 8003988:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800398c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003990:	f04f 0803 	mov.w	r8, #3
 8003994:	2600      	movs	r6, #0
 8003996:	2700      	movs	r7, #0
 8003998:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800399c:	4632      	mov	r2, r6
 800399e:	463b      	mov	r3, r7
 80039a0:	46c2      	mov	sl, r8
 80039a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80039a6:	f7fc ff73 	bl	8000890 <__aeabi_dcmpeq>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d1f4      	bne.n	8003998 <__ieee754_rem_pio2+0x3a0>
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <__ieee754_rem_pio2+0x3f4>)
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	2302      	movs	r3, #2
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	462a      	mov	r2, r5
 80039b8:	4653      	mov	r3, sl
 80039ba:	4621      	mov	r1, r4
 80039bc:	a806      	add	r0, sp, #24
 80039be:	f000 f81f 	bl	8003a00 <__kernel_rem_pio2>
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	4605      	mov	r5, r0
 80039c8:	f6bf ae53 	bge.w	8003672 <__ieee754_rem_pio2+0x7a>
 80039cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80039d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80039d4:	e9c4 2300 	strd	r2, r3, [r4]
 80039d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80039dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80039e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80039e4:	e740      	b.n	8003868 <__ieee754_rem_pio2+0x270>
 80039e6:	bf00      	nop
 80039e8:	41700000 	.word	0x41700000
 80039ec:	08004350 	.word	0x08004350

080039f0 <fabs>:
 80039f0:	ec51 0b10 	vmov	r0, r1, d0
 80039f4:	4602      	mov	r2, r0
 80039f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80039fa:	ec43 2b10 	vmov	d0, r2, r3
 80039fe:	4770      	bx	lr

08003a00 <__kernel_rem_pio2>:
 8003a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	ed2d 8b02 	vpush	{d8}
 8003a08:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003a0c:	f112 0f14 	cmn.w	r2, #20
 8003a10:	9306      	str	r3, [sp, #24]
 8003a12:	9104      	str	r1, [sp, #16]
 8003a14:	4bbe      	ldr	r3, [pc, #760]	@ (8003d10 <__kernel_rem_pio2+0x310>)
 8003a16:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003a18:	9008      	str	r0, [sp, #32]
 8003a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	9b06      	ldr	r3, [sp, #24]
 8003a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a26:	bfa8      	it	ge
 8003a28:	1ed4      	subge	r4, r2, #3
 8003a2a:	9305      	str	r3, [sp, #20]
 8003a2c:	bfb2      	itee	lt
 8003a2e:	2400      	movlt	r4, #0
 8003a30:	2318      	movge	r3, #24
 8003a32:	fb94 f4f3 	sdivge	r4, r4, r3
 8003a36:	f06f 0317 	mvn.w	r3, #23
 8003a3a:	fb04 3303 	mla	r3, r4, r3, r3
 8003a3e:	eb03 0b02 	add.w	fp, r3, r2
 8003a42:	9b00      	ldr	r3, [sp, #0]
 8003a44:	9a05      	ldr	r2, [sp, #20]
 8003a46:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003d00 <__kernel_rem_pio2+0x300>
 8003a4a:	eb03 0802 	add.w	r8, r3, r2
 8003a4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003a50:	1aa7      	subs	r7, r4, r2
 8003a52:	ae20      	add	r6, sp, #128	@ 0x80
 8003a54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a58:	2500      	movs	r5, #0
 8003a5a:	4545      	cmp	r5, r8
 8003a5c:	dd13      	ble.n	8003a86 <__kernel_rem_pio2+0x86>
 8003a5e:	9b06      	ldr	r3, [sp, #24]
 8003a60:	aa20      	add	r2, sp, #128	@ 0x80
 8003a62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003a66:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003a6a:	f04f 0800 	mov.w	r8, #0
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	4598      	cmp	r8, r3
 8003a72:	dc31      	bgt.n	8003ad8 <__kernel_rem_pio2+0xd8>
 8003a74:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003d00 <__kernel_rem_pio2+0x300>
 8003a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a80:	462f      	mov	r7, r5
 8003a82:	2600      	movs	r6, #0
 8003a84:	e01b      	b.n	8003abe <__kernel_rem_pio2+0xbe>
 8003a86:	42ef      	cmn	r7, r5
 8003a88:	d407      	bmi.n	8003a9a <__kernel_rem_pio2+0x9a>
 8003a8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a8e:	f7fc fe3f 	bl	8000710 <__aeabi_i2d>
 8003a92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a96:	3501      	adds	r5, #1
 8003a98:	e7df      	b.n	8003a5a <__kernel_rem_pio2+0x5a>
 8003a9a:	ec51 0b18 	vmov	r0, r1, d8
 8003a9e:	e7f8      	b.n	8003a92 <__kernel_rem_pio2+0x92>
 8003aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003aa8:	f7fc fbb6 	bl	8000218 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ab4:	f7fc fce0 	bl	8000478 <__adddf3>
 8003ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003abc:	3601      	adds	r6, #1
 8003abe:	9b05      	ldr	r3, [sp, #20]
 8003ac0:	429e      	cmp	r6, r3
 8003ac2:	f1a7 0708 	sub.w	r7, r7, #8
 8003ac6:	ddeb      	ble.n	8003aa0 <__kernel_rem_pio2+0xa0>
 8003ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003acc:	f108 0801 	add.w	r8, r8, #1
 8003ad0:	ecaa 7b02 	vstmia	sl!, {d7}
 8003ad4:	3508      	adds	r5, #8
 8003ad6:	e7ca      	b.n	8003a6e <__kernel_rem_pio2+0x6e>
 8003ad8:	9b00      	ldr	r3, [sp, #0]
 8003ada:	f8dd 8000 	ldr.w	r8, [sp]
 8003ade:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ae6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003ae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003af4:	ab98      	add	r3, sp, #608	@ 0x260
 8003af6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003afa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003afe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b02:	ac0c      	add	r4, sp, #48	@ 0x30
 8003b04:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003b06:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003b0a:	46a1      	mov	r9, r4
 8003b0c:	46c2      	mov	sl, r8
 8003b0e:	f1ba 0f00 	cmp.w	sl, #0
 8003b12:	f1a5 0508 	sub.w	r5, r5, #8
 8003b16:	dc77      	bgt.n	8003c08 <__kernel_rem_pio2+0x208>
 8003b18:	4658      	mov	r0, fp
 8003b1a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003b1e:	f000 fac7 	bl	80040b0 <scalbn>
 8003b22:	ec57 6b10 	vmov	r6, r7, d0
 8003b26:	2200      	movs	r2, #0
 8003b28:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	4639      	mov	r1, r7
 8003b30:	f7fc fb72 	bl	8000218 <__aeabi_dmul>
 8003b34:	ec41 0b10 	vmov	d0, r0, r1
 8003b38:	f000 fb3a 	bl	80041b0 <floor>
 8003b3c:	4b75      	ldr	r3, [pc, #468]	@ (8003d14 <__kernel_rem_pio2+0x314>)
 8003b3e:	ec51 0b10 	vmov	r0, r1, d0
 8003b42:	2200      	movs	r2, #0
 8003b44:	f7fc fb68 	bl	8000218 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	4639      	mov	r1, r7
 8003b50:	f7fc fc90 	bl	8000474 <__aeabi_dsub>
 8003b54:	460f      	mov	r7, r1
 8003b56:	4606      	mov	r6, r0
 8003b58:	f7fc fecc 	bl	80008f4 <__aeabi_d2iz>
 8003b5c:	9002      	str	r0, [sp, #8]
 8003b5e:	f7fc fdd7 	bl	8000710 <__aeabi_i2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4630      	mov	r0, r6
 8003b68:	4639      	mov	r1, r7
 8003b6a:	f7fc fc83 	bl	8000474 <__aeabi_dsub>
 8003b6e:	f1bb 0f00 	cmp.w	fp, #0
 8003b72:	4606      	mov	r6, r0
 8003b74:	460f      	mov	r7, r1
 8003b76:	dd6c      	ble.n	8003c52 <__kernel_rem_pio2+0x252>
 8003b78:	f108 31ff 	add.w	r1, r8, #4294967295
 8003b7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b7e:	9d02      	ldr	r5, [sp, #8]
 8003b80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b84:	f1cb 0018 	rsb	r0, fp, #24
 8003b88:	fa43 f200 	asr.w	r2, r3, r0
 8003b8c:	4415      	add	r5, r2
 8003b8e:	4082      	lsls	r2, r0
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	aa0c      	add	r2, sp, #48	@ 0x30
 8003b94:	9502      	str	r5, [sp, #8]
 8003b96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003b9a:	f1cb 0217 	rsb	r2, fp, #23
 8003b9e:	fa43 f902 	asr.w	r9, r3, r2
 8003ba2:	f1b9 0f00 	cmp.w	r9, #0
 8003ba6:	dd64      	ble.n	8003c72 <__kernel_rem_pio2+0x272>
 8003ba8:	9b02      	ldr	r3, [sp, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	3301      	adds	r3, #1
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	4615      	mov	r5, r2
 8003bb2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003bb6:	4590      	cmp	r8, r2
 8003bb8:	f300 80b8 	bgt.w	8003d2c <__kernel_rem_pio2+0x32c>
 8003bbc:	f1bb 0f00 	cmp.w	fp, #0
 8003bc0:	dd07      	ble.n	8003bd2 <__kernel_rem_pio2+0x1d2>
 8003bc2:	f1bb 0f01 	cmp.w	fp, #1
 8003bc6:	f000 80bf 	beq.w	8003d48 <__kernel_rem_pio2+0x348>
 8003bca:	f1bb 0f02 	cmp.w	fp, #2
 8003bce:	f000 80c6 	beq.w	8003d5e <__kernel_rem_pio2+0x35e>
 8003bd2:	f1b9 0f02 	cmp.w	r9, #2
 8003bd6:	d14c      	bne.n	8003c72 <__kernel_rem_pio2+0x272>
 8003bd8:	4632      	mov	r2, r6
 8003bda:	463b      	mov	r3, r7
 8003bdc:	494e      	ldr	r1, [pc, #312]	@ (8003d18 <__kernel_rem_pio2+0x318>)
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fc fc48 	bl	8000474 <__aeabi_dsub>
 8003be4:	4606      	mov	r6, r0
 8003be6:	460f      	mov	r7, r1
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	d042      	beq.n	8003c72 <__kernel_rem_pio2+0x272>
 8003bec:	4658      	mov	r0, fp
 8003bee:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003d08 <__kernel_rem_pio2+0x308>
 8003bf2:	f000 fa5d 	bl	80040b0 <scalbn>
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	ec53 2b10 	vmov	r2, r3, d0
 8003bfe:	f7fc fc39 	bl	8000474 <__aeabi_dsub>
 8003c02:	4606      	mov	r6, r0
 8003c04:	460f      	mov	r7, r1
 8003c06:	e034      	b.n	8003c72 <__kernel_rem_pio2+0x272>
 8003c08:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <__kernel_rem_pio2+0x31c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c10:	f7fc fb02 	bl	8000218 <__aeabi_dmul>
 8003c14:	f7fc fe6e 	bl	80008f4 <__aeabi_d2iz>
 8003c18:	f7fc fd7a 	bl	8000710 <__aeabi_i2d>
 8003c1c:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <__kernel_rem_pio2+0x320>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4606      	mov	r6, r0
 8003c22:	460f      	mov	r7, r1
 8003c24:	f7fc faf8 	bl	8000218 <__aeabi_dmul>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c30:	f7fc fc20 	bl	8000474 <__aeabi_dsub>
 8003c34:	f7fc fe5e 	bl	80008f4 <__aeabi_d2iz>
 8003c38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c3c:	f849 0b04 	str.w	r0, [r9], #4
 8003c40:	4639      	mov	r1, r7
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7fc fc18 	bl	8000478 <__adddf3>
 8003c48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c50:	e75d      	b.n	8003b0e <__kernel_rem_pio2+0x10e>
 8003c52:	d107      	bne.n	8003c64 <__kernel_rem_pio2+0x264>
 8003c54:	f108 33ff 	add.w	r3, r8, #4294967295
 8003c58:	aa0c      	add	r2, sp, #48	@ 0x30
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003c62:	e79e      	b.n	8003ba2 <__kernel_rem_pio2+0x1a2>
 8003c64:	4b2f      	ldr	r3, [pc, #188]	@ (8003d24 <__kernel_rem_pio2+0x324>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f7fc fe30 	bl	80008cc <__aeabi_dcmpge>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d143      	bne.n	8003cf8 <__kernel_rem_pio2+0x2f8>
 8003c70:	4681      	mov	r9, r0
 8003c72:	2200      	movs	r2, #0
 8003c74:	2300      	movs	r3, #0
 8003c76:	4630      	mov	r0, r6
 8003c78:	4639      	mov	r1, r7
 8003c7a:	f7fc fe09 	bl	8000890 <__aeabi_dcmpeq>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	f000 80bf 	beq.w	8003e02 <__kernel_rem_pio2+0x402>
 8003c84:	f108 33ff 	add.w	r3, r8, #4294967295
 8003c88:	2200      	movs	r2, #0
 8003c8a:	9900      	ldr	r1, [sp, #0]
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	da6e      	bge.n	8003d6e <__kernel_rem_pio2+0x36e>
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	f000 8089 	beq.w	8003da8 <__kernel_rem_pio2+0x3a8>
 8003c96:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003c9c:	f1ab 0b18 	sub.w	fp, fp, #24
 8003ca0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f6      	beq.n	8003c96 <__kernel_rem_pio2+0x296>
 8003ca8:	4658      	mov	r0, fp
 8003caa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003d08 <__kernel_rem_pio2+0x308>
 8003cae:	f000 f9ff 	bl	80040b0 <scalbn>
 8003cb2:	f108 0301 	add.w	r3, r8, #1
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	9205      	str	r2, [sp, #20]
 8003cba:	ec55 4b10 	vmov	r4, r5, d0
 8003cbe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003cc0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003d1c <__kernel_rem_pio2+0x31c>
 8003cc4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003cc8:	4646      	mov	r6, r8
 8003cca:	f04f 0a00 	mov.w	sl, #0
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	f280 80cf 	bge.w	8003e72 <__kernel_rem_pio2+0x472>
 8003cd4:	4644      	mov	r4, r8
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	f2c0 80fd 	blt.w	8003ed6 <__kernel_rem_pio2+0x4d6>
 8003cdc:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <__kernel_rem_pio2+0x328>)
 8003cde:	461f      	mov	r7, r3
 8003ce0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003ce2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ce6:	9306      	str	r3, [sp, #24]
 8003ce8:	f04f 0a00 	mov.w	sl, #0
 8003cec:	f04f 0b00 	mov.w	fp, #0
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	eba8 0504 	sub.w	r5, r8, r4
 8003cf6:	e0e2      	b.n	8003ebe <__kernel_rem_pio2+0x4be>
 8003cf8:	f04f 0902 	mov.w	r9, #2
 8003cfc:	e754      	b.n	8003ba8 <__kernel_rem_pio2+0x1a8>
 8003cfe:	bf00      	nop
	...
 8003d0c:	3ff00000 	.word	0x3ff00000
 8003d10:	08004498 	.word	0x08004498
 8003d14:	40200000 	.word	0x40200000
 8003d18:	3ff00000 	.word	0x3ff00000
 8003d1c:	3e700000 	.word	0x3e700000
 8003d20:	41700000 	.word	0x41700000
 8003d24:	3fe00000 	.word	0x3fe00000
 8003d28:	08004458 	.word	0x08004458
 8003d2c:	f854 3b04 	ldr.w	r3, [r4], #4
 8003d30:	b945      	cbnz	r5, 8003d44 <__kernel_rem_pio2+0x344>
 8003d32:	b123      	cbz	r3, 8003d3e <__kernel_rem_pio2+0x33e>
 8003d34:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003d38:	f844 3c04 	str.w	r3, [r4, #-4]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	3201      	adds	r2, #1
 8003d40:	461d      	mov	r5, r3
 8003d42:	e738      	b.n	8003bb6 <__kernel_rem_pio2+0x1b6>
 8003d44:	1acb      	subs	r3, r1, r3
 8003d46:	e7f7      	b.n	8003d38 <__kernel_rem_pio2+0x338>
 8003d48:	f108 32ff 	add.w	r2, r8, #4294967295
 8003d4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d56:	a90c      	add	r1, sp, #48	@ 0x30
 8003d58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d5c:	e739      	b.n	8003bd2 <__kernel_rem_pio2+0x1d2>
 8003d5e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003d62:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d6c:	e7f3      	b.n	8003d56 <__kernel_rem_pio2+0x356>
 8003d6e:	a90c      	add	r1, sp, #48	@ 0x30
 8003d70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	e787      	b.n	8003c8a <__kernel_rem_pio2+0x28a>
 8003d7a:	3401      	adds	r4, #1
 8003d7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d0fa      	beq.n	8003d7a <__kernel_rem_pio2+0x37a>
 8003d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d8a:	eb0d 0503 	add.w	r5, sp, r3
 8003d8e:	9b06      	ldr	r3, [sp, #24]
 8003d90:	aa20      	add	r2, sp, #128	@ 0x80
 8003d92:	4443      	add	r3, r8
 8003d94:	f108 0701 	add.w	r7, r8, #1
 8003d98:	3d98      	subs	r5, #152	@ 0x98
 8003d9a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003d9e:	4444      	add	r4, r8
 8003da0:	42bc      	cmp	r4, r7
 8003da2:	da04      	bge.n	8003dae <__kernel_rem_pio2+0x3ae>
 8003da4:	46a0      	mov	r8, r4
 8003da6:	e6a2      	b.n	8003aee <__kernel_rem_pio2+0xee>
 8003da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003daa:	2401      	movs	r4, #1
 8003dac:	e7e6      	b.n	8003d7c <__kernel_rem_pio2+0x37c>
 8003dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003db0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003db4:	f7fc fcac 	bl	8000710 <__aeabi_i2d>
 8003db8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004080 <__kernel_rem_pio2+0x680>
 8003dbc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003dc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dc8:	46b2      	mov	sl, r6
 8003dca:	f04f 0800 	mov.w	r8, #0
 8003dce:	9b05      	ldr	r3, [sp, #20]
 8003dd0:	4598      	cmp	r8, r3
 8003dd2:	dd05      	ble.n	8003de0 <__kernel_rem_pio2+0x3e0>
 8003dd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003dd8:	3701      	adds	r7, #1
 8003dda:	eca5 7b02 	vstmia	r5!, {d7}
 8003dde:	e7df      	b.n	8003da0 <__kernel_rem_pio2+0x3a0>
 8003de0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003de4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003de8:	f7fc fa16 	bl	8000218 <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003df4:	f7fc fb40 	bl	8000478 <__adddf3>
 8003df8:	f108 0801 	add.w	r8, r8, #1
 8003dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e00:	e7e5      	b.n	8003dce <__kernel_rem_pio2+0x3ce>
 8003e02:	f1cb 0000 	rsb	r0, fp, #0
 8003e06:	ec47 6b10 	vmov	d0, r6, r7
 8003e0a:	f000 f951 	bl	80040b0 <scalbn>
 8003e0e:	ec55 4b10 	vmov	r4, r5, d0
 8003e12:	4b9d      	ldr	r3, [pc, #628]	@ (8004088 <__kernel_rem_pio2+0x688>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc fd57 	bl	80008cc <__aeabi_dcmpge>
 8003e1e:	b300      	cbz	r0, 8003e62 <__kernel_rem_pio2+0x462>
 8003e20:	4b9a      	ldr	r3, [pc, #616]	@ (800408c <__kernel_rem_pio2+0x68c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc f9f6 	bl	8000218 <__aeabi_dmul>
 8003e2c:	f7fc fd62 	bl	80008f4 <__aeabi_d2iz>
 8003e30:	4606      	mov	r6, r0
 8003e32:	f7fc fc6d 	bl	8000710 <__aeabi_i2d>
 8003e36:	4b94      	ldr	r3, [pc, #592]	@ (8004088 <__kernel_rem_pio2+0x688>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f7fc f9ed 	bl	8000218 <__aeabi_dmul>
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4602      	mov	r2, r0
 8003e42:	4629      	mov	r1, r5
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7fc fb15 	bl	8000474 <__aeabi_dsub>
 8003e4a:	f7fc fd53 	bl	80008f4 <__aeabi_d2iz>
 8003e4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e50:	f10b 0b18 	add.w	fp, fp, #24
 8003e54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003e58:	f108 0801 	add.w	r8, r8, #1
 8003e5c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8003e60:	e722      	b.n	8003ca8 <__kernel_rem_pio2+0x2a8>
 8003e62:	4620      	mov	r0, r4
 8003e64:	4629      	mov	r1, r5
 8003e66:	f7fc fd45 	bl	80008f4 <__aeabi_d2iz>
 8003e6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e6c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003e70:	e71a      	b.n	8003ca8 <__kernel_rem_pio2+0x2a8>
 8003e72:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e74:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003e78:	f7fc fc4a 	bl	8000710 <__aeabi_i2d>
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	462b      	mov	r3, r5
 8003e80:	f7fc f9ca 	bl	8000218 <__aeabi_dmul>
 8003e84:	4652      	mov	r2, sl
 8003e86:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc f9c2 	bl	8000218 <__aeabi_dmul>
 8003e94:	3e01      	subs	r6, #1
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	e718      	b.n	8003cce <__kernel_rem_pio2+0x2ce>
 8003e9c:	9906      	ldr	r1, [sp, #24]
 8003e9e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003ea2:	9106      	str	r1, [sp, #24]
 8003ea4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003ea8:	f7fc f9b6 	bl	8000218 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4650      	mov	r0, sl
 8003eb2:	4659      	mov	r1, fp
 8003eb4:	f7fc fae0 	bl	8000478 <__adddf3>
 8003eb8:	3601      	adds	r6, #1
 8003eba:	4682      	mov	sl, r0
 8003ebc:	468b      	mov	fp, r1
 8003ebe:	9b00      	ldr	r3, [sp, #0]
 8003ec0:	429e      	cmp	r6, r3
 8003ec2:	dc01      	bgt.n	8003ec8 <__kernel_rem_pio2+0x4c8>
 8003ec4:	42b5      	cmp	r5, r6
 8003ec6:	dae9      	bge.n	8003e9c <__kernel_rem_pio2+0x49c>
 8003ec8:	ab48      	add	r3, sp, #288	@ 0x120
 8003eca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003ece:	e9c5 ab00 	strd	sl, fp, [r5]
 8003ed2:	3c01      	subs	r4, #1
 8003ed4:	e6ff      	b.n	8003cd6 <__kernel_rem_pio2+0x2d6>
 8003ed6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	dc0b      	bgt.n	8003ef4 <__kernel_rem_pio2+0x4f4>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc39      	bgt.n	8003f54 <__kernel_rem_pio2+0x554>
 8003ee0:	d05d      	beq.n	8003f9e <__kernel_rem_pio2+0x59e>
 8003ee2:	9b02      	ldr	r3, [sp, #8]
 8003ee4:	f003 0007 	and.w	r0, r3, #7
 8003ee8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003eec:	ecbd 8b02 	vpop	{d8}
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d1f3      	bne.n	8003ee2 <__kernel_rem_pio2+0x4e2>
 8003efa:	9b05      	ldr	r3, [sp, #20]
 8003efc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f00:	eb0d 0403 	add.w	r4, sp, r3
 8003f04:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003f08:	4625      	mov	r5, r4
 8003f0a:	46c2      	mov	sl, r8
 8003f0c:	f1ba 0f00 	cmp.w	sl, #0
 8003f10:	f1a5 0508 	sub.w	r5, r5, #8
 8003f14:	dc6b      	bgt.n	8003fee <__kernel_rem_pio2+0x5ee>
 8003f16:	4645      	mov	r5, r8
 8003f18:	2d01      	cmp	r5, #1
 8003f1a:	f1a4 0408 	sub.w	r4, r4, #8
 8003f1e:	f300 8087 	bgt.w	8004030 <__kernel_rem_pio2+0x630>
 8003f22:	9c05      	ldr	r4, [sp, #20]
 8003f24:	ab48      	add	r3, sp, #288	@ 0x120
 8003f26:	441c      	add	r4, r3
 8003f28:	2000      	movs	r0, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f1b8 0f01 	cmp.w	r8, #1
 8003f30:	f300 809c 	bgt.w	800406c <__kernel_rem_pio2+0x66c>
 8003f34:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8003f38:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003f3c:	f1b9 0f00 	cmp.w	r9, #0
 8003f40:	f040 80a6 	bne.w	8004090 <__kernel_rem_pio2+0x690>
 8003f44:	9b04      	ldr	r3, [sp, #16]
 8003f46:	e9c3 7800 	strd	r7, r8, [r3]
 8003f4a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003f4e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003f52:	e7c6      	b.n	8003ee2 <__kernel_rem_pio2+0x4e2>
 8003f54:	9d05      	ldr	r5, [sp, #20]
 8003f56:	ab48      	add	r3, sp, #288	@ 0x120
 8003f58:	441d      	add	r5, r3
 8003f5a:	4644      	mov	r4, r8
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	2100      	movs	r1, #0
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	da35      	bge.n	8003fd0 <__kernel_rem_pio2+0x5d0>
 8003f64:	f1b9 0f00 	cmp.w	r9, #0
 8003f68:	d038      	beq.n	8003fdc <__kernel_rem_pio2+0x5dc>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f70:	9c04      	ldr	r4, [sp, #16]
 8003f72:	e9c4 2300 	strd	r2, r3, [r4]
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003f7e:	f7fc fa79 	bl	8000474 <__aeabi_dsub>
 8003f82:	ad4a      	add	r5, sp, #296	@ 0x128
 8003f84:	2401      	movs	r4, #1
 8003f86:	45a0      	cmp	r8, r4
 8003f88:	da2b      	bge.n	8003fe2 <__kernel_rem_pio2+0x5e2>
 8003f8a:	f1b9 0f00 	cmp.w	r9, #0
 8003f8e:	d002      	beq.n	8003f96 <__kernel_rem_pio2+0x596>
 8003f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f94:	4619      	mov	r1, r3
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003f9c:	e7a1      	b.n	8003ee2 <__kernel_rem_pio2+0x4e2>
 8003f9e:	9c05      	ldr	r4, [sp, #20]
 8003fa0:	ab48      	add	r3, sp, #288	@ 0x120
 8003fa2:	441c      	add	r4, r3
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f1b8 0f00 	cmp.w	r8, #0
 8003fac:	da09      	bge.n	8003fc2 <__kernel_rem_pio2+0x5c2>
 8003fae:	f1b9 0f00 	cmp.w	r9, #0
 8003fb2:	d002      	beq.n	8003fba <__kernel_rem_pio2+0x5ba>
 8003fb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fb8:	4619      	mov	r1, r3
 8003fba:	9b04      	ldr	r3, [sp, #16]
 8003fbc:	e9c3 0100 	strd	r0, r1, [r3]
 8003fc0:	e78f      	b.n	8003ee2 <__kernel_rem_pio2+0x4e2>
 8003fc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fc6:	f7fc fa57 	bl	8000478 <__adddf3>
 8003fca:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fce:	e7eb      	b.n	8003fa8 <__kernel_rem_pio2+0x5a8>
 8003fd0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003fd4:	f7fc fa50 	bl	8000478 <__adddf3>
 8003fd8:	3c01      	subs	r4, #1
 8003fda:	e7c1      	b.n	8003f60 <__kernel_rem_pio2+0x560>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e7c6      	b.n	8003f70 <__kernel_rem_pio2+0x570>
 8003fe2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003fe6:	f7fc fa47 	bl	8000478 <__adddf3>
 8003fea:	3401      	adds	r4, #1
 8003fec:	e7cb      	b.n	8003f86 <__kernel_rem_pio2+0x586>
 8003fee:	ed95 7b00 	vldr	d7, [r5]
 8003ff2:	ed8d 7b00 	vstr	d7, [sp]
 8003ff6:	ed95 7b02 	vldr	d7, [r5, #8]
 8003ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ffe:	ec53 2b17 	vmov	r2, r3, d7
 8004002:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004006:	f7fc fa37 	bl	8000478 <__adddf3>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004016:	f7fc fa2d 	bl	8000474 <__aeabi_dsub>
 800401a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800401e:	f7fc fa2b 	bl	8000478 <__adddf3>
 8004022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004026:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800402a:	e9c5 6700 	strd	r6, r7, [r5]
 800402e:	e76d      	b.n	8003f0c <__kernel_rem_pio2+0x50c>
 8004030:	ed94 7b00 	vldr	d7, [r4]
 8004034:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004038:	ec51 0b17 	vmov	r0, r1, d7
 800403c:	4652      	mov	r2, sl
 800403e:	465b      	mov	r3, fp
 8004040:	ed8d 7b00 	vstr	d7, [sp]
 8004044:	f7fc fa18 	bl	8000478 <__adddf3>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4606      	mov	r6, r0
 800404e:	460f      	mov	r7, r1
 8004050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004054:	f7fc fa0e 	bl	8000474 <__aeabi_dsub>
 8004058:	4652      	mov	r2, sl
 800405a:	465b      	mov	r3, fp
 800405c:	f7fc fa0c 	bl	8000478 <__adddf3>
 8004060:	3d01      	subs	r5, #1
 8004062:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004066:	e9c4 6700 	strd	r6, r7, [r4]
 800406a:	e755      	b.n	8003f18 <__kernel_rem_pio2+0x518>
 800406c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004070:	f7fc fa02 	bl	8000478 <__adddf3>
 8004074:	f108 38ff 	add.w	r8, r8, #4294967295
 8004078:	e758      	b.n	8003f2c <__kernel_rem_pio2+0x52c>
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w
	...
 8004088:	41700000 	.word	0x41700000
 800408c:	3e700000 	.word	0x3e700000
 8004090:	9b04      	ldr	r3, [sp, #16]
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	601f      	str	r7, [r3, #0]
 8004096:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800409a:	605c      	str	r4, [r3, #4]
 800409c:	609d      	str	r5, [r3, #8]
 800409e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040a2:	60d3      	str	r3, [r2, #12]
 80040a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040a8:	6110      	str	r0, [r2, #16]
 80040aa:	6153      	str	r3, [r2, #20]
 80040ac:	e719      	b.n	8003ee2 <__kernel_rem_pio2+0x4e2>
 80040ae:	bf00      	nop

080040b0 <scalbn>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	ec55 4b10 	vmov	r4, r5, d0
 80040b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80040ba:	4606      	mov	r6, r0
 80040bc:	462b      	mov	r3, r5
 80040be:	b991      	cbnz	r1, 80040e6 <scalbn+0x36>
 80040c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80040c4:	4323      	orrs	r3, r4
 80040c6:	d03d      	beq.n	8004144 <scalbn+0x94>
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <scalbn+0xf0>)
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	2200      	movs	r2, #0
 80040d0:	f7fc f8a2 	bl	8000218 <__aeabi_dmul>
 80040d4:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <scalbn+0xf4>)
 80040d6:	429e      	cmp	r6, r3
 80040d8:	4604      	mov	r4, r0
 80040da:	460d      	mov	r5, r1
 80040dc:	da0f      	bge.n	80040fe <scalbn+0x4e>
 80040de:	a328      	add	r3, pc, #160	@ (adr r3, 8004180 <scalbn+0xd0>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	e01e      	b.n	8004124 <scalbn+0x74>
 80040e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80040ea:	4291      	cmp	r1, r2
 80040ec:	d10b      	bne.n	8004106 <scalbn+0x56>
 80040ee:	4622      	mov	r2, r4
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc f9c0 	bl	8000478 <__adddf3>
 80040f8:	4604      	mov	r4, r0
 80040fa:	460d      	mov	r5, r1
 80040fc:	e022      	b.n	8004144 <scalbn+0x94>
 80040fe:	460b      	mov	r3, r1
 8004100:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004104:	3936      	subs	r1, #54	@ 0x36
 8004106:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800410a:	4296      	cmp	r6, r2
 800410c:	dd0d      	ble.n	800412a <scalbn+0x7a>
 800410e:	2d00      	cmp	r5, #0
 8004110:	a11d      	add	r1, pc, #116	@ (adr r1, 8004188 <scalbn+0xd8>)
 8004112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004116:	da02      	bge.n	800411e <scalbn+0x6e>
 8004118:	a11d      	add	r1, pc, #116	@ (adr r1, 8004190 <scalbn+0xe0>)
 800411a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800411e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004188 <scalbn+0xd8>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc f878 	bl	8000218 <__aeabi_dmul>
 8004128:	e7e6      	b.n	80040f8 <scalbn+0x48>
 800412a:	1872      	adds	r2, r6, r1
 800412c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004130:	428a      	cmp	r2, r1
 8004132:	dcec      	bgt.n	800410e <scalbn+0x5e>
 8004134:	2a00      	cmp	r2, #0
 8004136:	dd08      	ble.n	800414a <scalbn+0x9a>
 8004138:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800413c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004140:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004144:	ec45 4b10 	vmov	d0, r4, r5
 8004148:	bd70      	pop	{r4, r5, r6, pc}
 800414a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800414e:	da08      	bge.n	8004162 <scalbn+0xb2>
 8004150:	2d00      	cmp	r5, #0
 8004152:	a10b      	add	r1, pc, #44	@ (adr r1, 8004180 <scalbn+0xd0>)
 8004154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004158:	dac1      	bge.n	80040de <scalbn+0x2e>
 800415a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004198 <scalbn+0xe8>)
 800415c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004160:	e7bd      	b.n	80040de <scalbn+0x2e>
 8004162:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004166:	3236      	adds	r2, #54	@ 0x36
 8004168:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800416c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004170:	4620      	mov	r0, r4
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <scalbn+0xf8>)
 8004174:	4629      	mov	r1, r5
 8004176:	2200      	movs	r2, #0
 8004178:	e7d4      	b.n	8004124 <scalbn+0x74>
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	c2f8f359 	.word	0xc2f8f359
 8004184:	01a56e1f 	.word	0x01a56e1f
 8004188:	8800759c 	.word	0x8800759c
 800418c:	7e37e43c 	.word	0x7e37e43c
 8004190:	8800759c 	.word	0x8800759c
 8004194:	fe37e43c 	.word	0xfe37e43c
 8004198:	c2f8f359 	.word	0xc2f8f359
 800419c:	81a56e1f 	.word	0x81a56e1f
 80041a0:	43500000 	.word	0x43500000
 80041a4:	ffff3cb0 	.word	0xffff3cb0
 80041a8:	3c900000 	.word	0x3c900000
 80041ac:	00000000 	.word	0x00000000

080041b0 <floor>:
 80041b0:	ec51 0b10 	vmov	r0, r1, d0
 80041b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80041c0:	2e13      	cmp	r6, #19
 80041c2:	460c      	mov	r4, r1
 80041c4:	4605      	mov	r5, r0
 80041c6:	4680      	mov	r8, r0
 80041c8:	dc34      	bgt.n	8004234 <floor+0x84>
 80041ca:	2e00      	cmp	r6, #0
 80041cc:	da17      	bge.n	80041fe <floor+0x4e>
 80041ce:	a332      	add	r3, pc, #200	@ (adr r3, 8004298 <floor+0xe8>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f7fc f950 	bl	8000478 <__adddf3>
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	f7fc fb80 	bl	80008e0 <__aeabi_dcmpgt>
 80041e0:	b150      	cbz	r0, 80041f8 <floor+0x48>
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	da55      	bge.n	8004292 <floor+0xe2>
 80041e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80041ea:	432c      	orrs	r4, r5
 80041ec:	2500      	movs	r5, #0
 80041ee:	42ac      	cmp	r4, r5
 80041f0:	4c2b      	ldr	r4, [pc, #172]	@ (80042a0 <floor+0xf0>)
 80041f2:	bf08      	it	eq
 80041f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80041f8:	4621      	mov	r1, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	e023      	b.n	8004246 <floor+0x96>
 80041fe:	4f29      	ldr	r7, [pc, #164]	@ (80042a4 <floor+0xf4>)
 8004200:	4137      	asrs	r7, r6
 8004202:	ea01 0307 	and.w	r3, r1, r7
 8004206:	4303      	orrs	r3, r0
 8004208:	d01d      	beq.n	8004246 <floor+0x96>
 800420a:	a323      	add	r3, pc, #140	@ (adr r3, 8004298 <floor+0xe8>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc f932 	bl	8000478 <__adddf3>
 8004214:	2200      	movs	r2, #0
 8004216:	2300      	movs	r3, #0
 8004218:	f7fc fb62 	bl	80008e0 <__aeabi_dcmpgt>
 800421c:	2800      	cmp	r0, #0
 800421e:	d0eb      	beq.n	80041f8 <floor+0x48>
 8004220:	2c00      	cmp	r4, #0
 8004222:	bfbe      	ittt	lt
 8004224:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004228:	4133      	asrlt	r3, r6
 800422a:	18e4      	addlt	r4, r4, r3
 800422c:	ea24 0407 	bic.w	r4, r4, r7
 8004230:	2500      	movs	r5, #0
 8004232:	e7e1      	b.n	80041f8 <floor+0x48>
 8004234:	2e33      	cmp	r6, #51	@ 0x33
 8004236:	dd0a      	ble.n	800424e <floor+0x9e>
 8004238:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800423c:	d103      	bne.n	8004246 <floor+0x96>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	f7fc f919 	bl	8000478 <__adddf3>
 8004246:	ec41 0b10 	vmov	d0, r0, r1
 800424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800424e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004252:	f04f 37ff 	mov.w	r7, #4294967295
 8004256:	40df      	lsrs	r7, r3
 8004258:	4207      	tst	r7, r0
 800425a:	d0f4      	beq.n	8004246 <floor+0x96>
 800425c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004298 <floor+0xe8>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f909 	bl	8000478 <__adddf3>
 8004266:	2200      	movs	r2, #0
 8004268:	2300      	movs	r3, #0
 800426a:	f7fc fb39 	bl	80008e0 <__aeabi_dcmpgt>
 800426e:	2800      	cmp	r0, #0
 8004270:	d0c2      	beq.n	80041f8 <floor+0x48>
 8004272:	2c00      	cmp	r4, #0
 8004274:	da0a      	bge.n	800428c <floor+0xdc>
 8004276:	2e14      	cmp	r6, #20
 8004278:	d101      	bne.n	800427e <floor+0xce>
 800427a:	3401      	adds	r4, #1
 800427c:	e006      	b.n	800428c <floor+0xdc>
 800427e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004282:	2301      	movs	r3, #1
 8004284:	40b3      	lsls	r3, r6
 8004286:	441d      	add	r5, r3
 8004288:	4545      	cmp	r5, r8
 800428a:	d3f6      	bcc.n	800427a <floor+0xca>
 800428c:	ea25 0507 	bic.w	r5, r5, r7
 8004290:	e7b2      	b.n	80041f8 <floor+0x48>
 8004292:	2500      	movs	r5, #0
 8004294:	462c      	mov	r4, r5
 8004296:	e7af      	b.n	80041f8 <floor+0x48>
 8004298:	8800759c 	.word	0x8800759c
 800429c:	7e37e43c 	.word	0x7e37e43c
 80042a0:	bff00000 	.word	0xbff00000
 80042a4:	000fffff 	.word	0x000fffff

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
