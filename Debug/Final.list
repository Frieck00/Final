
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080049c8  080049c8  000059c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb0  08004bb0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb0  08004bb0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00005bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00005bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08004bc4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08004bc4  000060c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a747  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac4  00000000  00000000  00010783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00012248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095e  00000000  00000000  00012e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5a1  00000000  00000000  000137d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d082  00000000  00000000  00030d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf24d  00000000  00000000  0003ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  000fd08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001006d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049b0 	.word	0x080049b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080049b0 	.word	0x080049b0

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a27      	ldr	r2, [pc, #156]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2110      	movs	r1, #16
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f000 fee1 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(drv_rst_GPIO_Port, drv_rst_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2104      	movs	r1, #4
 80009b2:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <MX_GPIO_Init+0xd4>)
 80009b4:	f000 fedc 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = drv_en_Pin;
 80009b8:	2310      	movs	r3, #16
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(drv_en_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f000 fd4b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = drv_err_Pin;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(drv_err_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <MX_GPIO_Init+0xd4>)
 80009ea:	f000 fd3f 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = drv_rst_Pin;
 80009ee:	2304      	movs	r3, #4
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(drv_rst_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_GPIO_Init+0xd4>)
 8000a06:	f000 fd31 	bl	800146c <HAL_GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000400 	.word	0x48000400

08000a1c <SetPWM.1>:
	  int32_t AA;
	  int32_t BB;
	  int32_t PWMValues[2][360];
	  float uzuf = 0.25;

	  void SetPWM(int32_t A, int32_t B){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	4663      	mov	r3, ip
 8000a28:	f8c7 c004 	str.w	ip, [r7, #4]
		  if(A>0){PhaseA=A;PhaseA2=0;}
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	dd06      	ble.n	8000a40 <SetPWM.1+0x24>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f8c3 2b58 	str.w	r2, [r3, #2904]	@ 0xb58
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f8c3 2b54 	str.w	r2, [r3, #2900]	@ 0xb54
 8000a3e:	e008      	b.n	8000a52 <SetPWM.1+0x36>
		  else{PhaseA=0;PhaseA2=abs(A);}
 8000a40:	2200      	movs	r2, #0
 8000a42:	f8c3 2b58 	str.w	r2, [r3, #2904]	@ 0xb58
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	bfb8      	it	lt
 8000a4c:	4252      	neglt	r2, r2
 8000a4e:	f8c3 2b54 	str.w	r2, [r3, #2900]	@ 0xb54
		  if(B>0){PhaseB=B;PhaseB2=0;}
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	dd06      	ble.n	8000a66 <SetPWM.1+0x4a>
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	f8c3 2b50 	str.w	r2, [r3, #2896]	@ 0xb50
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f8c3 2b4c 	str.w	r2, [r3, #2892]	@ 0xb4c
 8000a64:	e008      	b.n	8000a78 <SetPWM.1+0x5c>
		  else{PhaseB=0;PhaseB2=abs(B);}
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8c3 2b50 	str.w	r2, [r3, #2896]	@ 0xb50
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	bfb8      	it	lt
 8000a72:	4252      	neglt	r2, r2
 8000a74:	f8c3 2b4c 	str.w	r2, [r3, #2892]	@ 0xb4c
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PhaseA);
 8000a78:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <SetPWM.1+0x90>)
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	f8d3 1b58 	ldr.w	r1, [r3, #2904]	@ 0xb58
 8000a80:	6351      	str	r1, [r2, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,PhaseA2);
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <SetPWM.1+0x90>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	f8d3 1b54 	ldr.w	r1, [r3, #2900]	@ 0xb54
 8000a8a:	6391      	str	r1, [r2, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,PhaseB);
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <SetPWM.1+0x90>)
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	f8d3 1b50 	ldr.w	r1, [r3, #2896]	@ 0xb50
 8000a94:	63d1      	str	r1, [r2, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,PhaseB2);
 8000a96:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SetPWM.1+0x90>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	f8d3 3b4c 	ldr.w	r3, [r3, #2892]	@ 0xb4c
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
	  }
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	20000028 	.word	0x20000028

08000ab0 <main>:
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	f6ad 3d68 	subw	sp, sp, #2920	@ 0xb68
 8000ab6:	af00      	add	r7, sp, #0
int main(void)
 8000ab8:	f507 6237 	add.w	r2, r7, #2928	@ 0xb70
 8000abc:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8000ac0:	f6a3 3364 	subw	r3, r3, #2916	@ 0xb64
 8000ac4:	f8c3 2b5c 	str.w	r2, [r3, #2908]	@ 0xb5c
	  int pulse=0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
	  float uzuf = 0.25;
 8000ace:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8000ad2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8000ad6:	f6a3 3364 	subw	r3, r3, #2916	@ 0xb64
 8000ada:	f603 3348 	addw	r3, r3, #2888	@ 0xb48
 8000ade:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 fb4d 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f8d6 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f7ff ff2c 	bl	8000944 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000aec:	f000 f97e 	bl	8000dec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000af0:	f000 fa12 	bl	8000f18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000af4:	2100      	movs	r1, #0
 8000af6:	481d      	ldr	r0, [pc, #116]	@ (8000b6c <main+0xbc>)
 8000af8:	f001 fcb4 	bl	8002464 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000afc:	2104      	movs	r1, #4
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <main+0xbc>)
 8000b00:	f001 fcb0 	bl	8002464 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b04:	2108      	movs	r1, #8
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <main+0xbc>)
 8000b08:	f001 fcac 	bl	8002464 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b0c:	210c      	movs	r1, #12
 8000b0e:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <main+0xbc>)
 8000b10:	f001 fca8 	bl	8002464 <HAL_TIM_PWM_Start>
  CalcPWM();
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	469c      	mov	ip, r3
 8000b18:	f000 f82a 	bl	8000b70 <CalcPWM.0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pulse++;
 8000b1c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8000b20:	3301      	adds	r3, #1
 8000b22:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
	  if(pulse>359){pulse=1;}
 8000b26:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8000b2a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b2e:	db02      	blt.n	8000b36 <main+0x86>
 8000b30:	2301      	movs	r3, #1
 8000b32:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
	  SetPWM(PWMValues[0][pulse],PWMValues[1][pulse]);
 8000b36:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8000b3a:	f6a3 3364 	subw	r3, r3, #2916	@ 0xb64
 8000b3e:	f8d7 2b64 	ldr.w	r2, [r7, #2916]	@ 0xb64
 8000b42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000b46:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8000b4a:	f6a3 3364 	subw	r3, r3, #2916	@ 0xb64
 8000b4e:	f8d7 2b64 	ldr.w	r2, [r7, #2916]	@ 0xb64
 8000b52:	f502 72b4 	add.w	r2, r2, #360	@ 0x168
 8000b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f7ff ff5c 	bl	8000a1c <SetPWM.1>
	  HAL_Delay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fb7b 	bl	8001260 <HAL_Delay>
	  pulse++;
 8000b6a:	e7d7      	b.n	8000b1c <main+0x6c>
 8000b6c:	20000028 	.word	0x20000028

08000b70 <CalcPWM.0>:
	  void CalcPWM(void){
 8000b70:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4664      	mov	r4, ip
 8000b7a:	f8c7 c004 	str.w	ip, [r7, #4]
		  for (int i = 0; i <= 360; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e074      	b.n	8000c6e <CalcPWM.0+0xfe>
			  AA=sin(i*(M_PI / 180.0))*pow(2, 7)*uzuf;
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fdc3 	bl	8000710 <__aeabi_i2d>
 8000b8a:	a33f      	add	r3, pc, #252	@ (adr r3, 8000c88 <CalcPWM.0+0x118>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff fb42 	bl	8000218 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	ec43 2b17 	vmov	d7, r2, r3
 8000b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000ba0:	eef0 0a67 	vmov.f32	s1, s15
 8000ba4:	f002 fed4 	bl	8003950 <sin>
 8000ba8:	ec51 0b10 	vmov	r0, r1, d0
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <CalcPWM.0+0x120>)
 8000bb2:	f7ff fb31 	bl	8000218 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4690      	mov	r8, r2
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	f603 3348 	addw	r3, r3, #2888	@ 0xb48
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fdb4 	bl	8000734 <__aeabi_f2d>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4640      	mov	r0, r8
 8000bd2:	4649      	mov	r1, r9
 8000bd4:	f7ff fb20 	bl	8000218 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4610      	mov	r0, r2
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff fe88 	bl	80008f4 <__aeabi_d2iz>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f8c4 3b44 	str.w	r3, [r4, #2884]	@ 0xb44
			  BB=cos(i*(M_PI / 180.0))*pow(2, 7)*uzuf;
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fd90 	bl	8000710 <__aeabi_i2d>
 8000bf0:	a325      	add	r3, pc, #148	@ (adr r3, 8000c88 <CalcPWM.0+0x118>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb0f 	bl	8000218 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	ec43 2b17 	vmov	d7, r2, r3
 8000c02:	eeb0 0a47 	vmov.f32	s0, s14
 8000c06:	eef0 0a67 	vmov.f32	s1, s15
 8000c0a:	f002 fe4d 	bl	80038a8 <cos>
 8000c0e:	ec51 0b10 	vmov	r0, r1, d0
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <CalcPWM.0+0x120>)
 8000c18:	f7ff fafe 	bl	8000218 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4690      	mov	r8, r2
 8000c22:	4699      	mov	r9, r3
 8000c24:	4623      	mov	r3, r4
 8000c26:	f603 3348 	addw	r3, r3, #2888	@ 0xb48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fd81 	bl	8000734 <__aeabi_f2d>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4640      	mov	r0, r8
 8000c38:	4649      	mov	r1, r9
 8000c3a:	f7ff faed 	bl	8000218 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff fe55 	bl	80008f4 <__aeabi_d2iz>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f8c4 3b40 	str.w	r3, [r4, #2880]	@ 0xb40
			  PWMValues[0][i]=AA;
 8000c50:	f8d4 2b44 	ldr.w	r2, [r4, #2884]	@ 0xb44
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			  PWMValues[1][i]=BB;
 8000c5a:	f8d4 2b40 	ldr.w	r2, [r4, #2880]	@ 0xb40
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000c64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		  for (int i = 0; i <= 360; i++) {
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000c74:	dd86      	ble.n	8000b84 <CalcPWM.0+0x14>
	  }
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	a2529d39 	.word	0xa2529d39
 8000c8c:	3f91df46 	.word	0x3f91df46
 8000c90:	40600000 	.word	0x40600000

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	2238      	movs	r2, #56	@ 0x38
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fdd4 	bl	8003850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cba:	f000 fd71 	bl	80017a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fe17 	bl	8001908 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ce0:	f000 f818 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 f915 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d08:	f000 f804 	bl	8000d14 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	@ 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d56:	f000 fdc7 	bl	80018e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 fa31 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	@ 0x38
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e2e:	2220      	movs	r2, #32
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e34:	22ff      	movs	r2, #255	@ 0xff
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	4833      	ldr	r0, [pc, #204]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e46:	f001 fa55 	bl	80022f4 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e50:	f7ff ff60 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482c      	ldr	r0, [pc, #176]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e62:	f001 fe07 	bl	8002a74 <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e6c:	f7ff ff52 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e70:	4828      	ldr	r0, [pc, #160]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e72:	f001 fa96 	bl	80023a2 <HAL_TIM_PWM_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e7c:	f7ff ff4a 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4821      	ldr	r0, [pc, #132]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000e90:	f002 fc5c 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e9a:	f7ff ff3b 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	@ 0x60
 8000ea0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4817      	ldr	r0, [pc, #92]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000eb6:	f001 fcc9 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ec0:	f7ff ff28 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000ecc:	f001 fcbe 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000ed6:	f7ff ff1d 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000ee2:	f001 fcb3 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000eec:	f7ff ff12 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000ef8:	f001 fca8 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000f02:	f7ff ff07 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f06:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <MX_TIM2_Init+0x128>)
 8000f08:	f000 f8bc 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	@ 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000028 	.word	0x20000028

08000f18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	@ (8000fbc <MX_TIM3_Init+0xa4>)
 8000f3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f5c:	4816      	ldr	r0, [pc, #88]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f5e:	f001 fb81 	bl	8002664 <HAL_TIM_IC_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f68:	f7ff fed4 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000f7c:	f002 fbe6 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000f86:	f7ff fec5 	bl	8000d14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_TIM3_Init+0xa0>)
 8000fa2:	f001 fbb6 	bl	8002712 <HAL_TIM_IC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fac:	f7ff feb2 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000074 	.word	0x20000074
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <HAL_TIM_IC_MspInit+0x7c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d127      	bne.n	800106e <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6593      	str	r3, [r2, #88]	@ 0x58
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_TIM_IC_MspInit+0x80>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800104e:	2310      	movs	r3, #16
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105e:	2302      	movs	r3, #2
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	@ (8001080 <HAL_TIM_IC_MspInit+0x84>)
 800106a:	f000 f9ff 	bl	800146c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40000400 	.word	0x40000400
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a4:	d139      	bne.n	800111a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_TIM_MspPostInit+0xa0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d6:	2303      	movs	r3, #3
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e6:	2301      	movs	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f4:	f000 f9ba 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110a:	2301      	movs	r3, #1
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <HAL_TIM_MspPostInit+0xa4>)
 8001116:	f000 f9a9 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800112c:	480d      	ldr	r0, [pc, #52]	@ (8001164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800112e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff fe4a 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 fb81 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fca7 	bl	8000ab0 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   r0, =_estack
 8001164:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001170:	08004bb8 	.word	0x08004bb8
  ldr r2, =_sbss
 8001174:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001178:	200000c4 	.word	0x200000c4

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f93d 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fdbe 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]

}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_InitTick+0x68>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d022      	beq.n	800120a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_InitTick+0x6c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f93a 	bl	8001452 <HAL_SYSTICK_Config>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d809      	bhi.n	80011fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ea:	2200      	movs	r2, #0
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	f000 f914 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_InitTick+0x70>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e007      	b.n	800120e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e004      	b.n	800120e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000008 	.word	0x20000008
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_IncTick+0x1c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_IncTick+0x20>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a03      	ldr	r2, [pc, #12]	@ (8001240 <HAL_IncTick+0x1c>)
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	200000c0 	.word	0x200000c0
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200000c0 	.word	0x200000c0

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d004      	beq.n	8001284 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_Delay+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001284:	bf00      	nop
 8001286:	f7ff ffdf 	bl	8001248 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	d8f7      	bhi.n	8001286 <HAL_Delay+0x26>
  {
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff47 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff5e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffb2 	bl	80013c4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800147a:	e15a      	b.n	8001732 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 814c 	beq.w	800172c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d005      	beq.n	80014ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d130      	bne.n	800150e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	f003 0201 	and.w	r2, r3, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b03      	cmp	r3, #3
 8001518:	d017      	beq.n	800154a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d123      	bne.n	800159e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	6939      	ldr	r1, [r7, #16]
 800159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0203 	and.w	r2, r3, #3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80a6 	beq.w	800172c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <HAL_GPIO_Init+0x2e4>)
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001750 <HAL_GPIO_Init+0x2e4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ec:	4b58      	ldr	r3, [pc, #352]	@ (8001750 <HAL_GPIO_Init+0x2e4>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f8:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <HAL_GPIO_Init+0x2e8>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001622:	d01f      	beq.n	8001664 <HAL_GPIO_Init+0x1f8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <HAL_GPIO_Init+0x2ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d019      	beq.n	8001660 <HAL_GPIO_Init+0x1f4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4b      	ldr	r2, [pc, #300]	@ (800175c <HAL_GPIO_Init+0x2f0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x1f0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4a      	ldr	r2, [pc, #296]	@ (8001760 <HAL_GPIO_Init+0x2f4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1ec>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a49      	ldr	r2, [pc, #292]	@ (8001764 <HAL_GPIO_Init+0x2f8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1e8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a48      	ldr	r2, [pc, #288]	@ (8001768 <HAL_GPIO_Init+0x2fc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1e4>
 800164c:	2305      	movs	r3, #5
 800164e:	e00a      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 8001650:	2306      	movs	r3, #6
 8001652:	e008      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 8001654:	2304      	movs	r3, #4
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 8001658:	2303      	movs	r3, #3
 800165a:	e004      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 800165c:	2302      	movs	r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_Init+0x1fa>
 8001664:	2300      	movs	r3, #0
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001676:	4937      	ldr	r1, [pc, #220]	@ (8001754 <HAL_GPIO_Init+0x2e8>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a8:	4a30      	ldr	r2, [pc, #192]	@ (800176c <HAL_GPIO_Init+0x300>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_GPIO_Init+0x300>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d2:	4a26      	ldr	r2, [pc, #152]	@ (800176c <HAL_GPIO_Init+0x300>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_GPIO_Init+0x300>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016fc:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <HAL_GPIO_Init+0x300>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f ae9d 	bne.w	800147c <HAL_GPIO_Init+0x10>
  }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800
 8001760:	48000c00 	.word	0x48000c00
 8001764:	48001000 	.word	0x48001000
 8001768:	48001400 	.word	0x48001400
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800178c:	e002      	b.n	8001794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d141      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ae:	4b4b      	ldr	r3, [pc, #300]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ba:	d131      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017bc:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017c2:	4a46      	ldr	r2, [pc, #280]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d4:	4a41      	ldr	r2, [pc, #260]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017dc:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2232      	movs	r2, #50	@ 0x32
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a3f      	ldr	r2, [pc, #252]	@ (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f2:	e002      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001806:	d102      	bne.n	800180e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f2      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180e:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181a:	d158      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e057      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001820:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001826:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800182c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001830:	e04d      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001838:	d141      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800183a:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001846:	d131      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001848:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800184e:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001860:	4a1e      	ldr	r2, [pc, #120]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001868:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2232      	movs	r2, #50	@ 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187e:	e002      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001892:	d102      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f2      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a6:	d112      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e011      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018bc:	e007      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40007000 	.word	0x40007000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f6:	6093      	str	r3, [r2, #8]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40007000 	.word	0x40007000

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e2fe      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b97      	ldr	r3, [pc, #604]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b94      	ldr	r3, [pc, #592]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x3e>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d002      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e2d9      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b85      	ldr	r3, [pc, #532]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a84      	ldr	r2, [pc, #528]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7f      	ldr	r3, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b7c      	ldr	r3, [pc, #496]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a77      	ldr	r2, [pc, #476]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b75      	ldr	r3, [pc, #468]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a74      	ldr	r2, [pc, #464]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fc42 	bl	8001248 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fc3e 	bl	8001248 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e29e      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	4b6a      	ldr	r3, [pc, #424]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fc2e 	bl	8001248 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fc2a 	bl	8001248 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e28a      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	4b60      	ldr	r3, [pc, #384]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1e:	4b59      	ldr	r3, [pc, #356]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a28:	4b56      	ldr	r3, [pc, #344]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x136>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_OscConfig+0x13c>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d11f      	bne.n	8001a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b4f      	ldr	r3, [pc, #316]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x154>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e25d      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	4946      	ldr	r1, [pc, #280]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a70:	4b45      	ldr	r3, [pc, #276]	@ (8001b88 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb9b 	bl	80011b0 <HAL_InitTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d043      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e249      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fbd6 	bl	8001248 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fbd2 	bl	8001248 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e232      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab2:	4b34      	ldr	r3, [pc, #208]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	492d      	ldr	r1, [pc, #180]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e01a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fbb2 	bl	8001248 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fbae 	bl	8001248 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e20e      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e0>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d041      	beq.n	8001b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b24:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fb8b 	bl	8001248 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fb87 	bl	8001248 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1e7      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ef      	beq.n	8001b36 <HAL_RCC_OscConfig+0x22e>
 8001b56:	e020      	b.n	8001b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fb6e 	bl	8001248 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6e:	e00d      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fb6a 	bl	8001248 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d906      	bls.n	8001b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ca      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ea      	bne.n	8001b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bac:	4b84      	ldr	r3, [pc, #528]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2b4>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bce:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b79      	ldr	r3, [pc, #484]	@ (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bea:	4b76      	ldr	r3, [pc, #472]	@ (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	@ (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb27 	bl	8001248 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7ff fb23 	bl	8001248 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e183      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_OscConfig+0x32e>
 8001c24:	4b66      	ldr	r3, [pc, #408]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c34:	e024      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d110      	bne.n	8001c60 <HAL_RCC_OscConfig+0x358>
 8001c3e:	4b60      	ldr	r3, [pc, #384]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c44:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c54:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c60:	4b57      	ldr	r3, [pc, #348]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c66:	4a56      	ldr	r2, [pc, #344]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c70:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff fade 	bl	8001248 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff fada 	bl	8001248 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e138      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCC_OscConfig+0x388>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fac7 	bl	8001248 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fac3 	bl	8001248 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e121      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ed      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a34      	ldr	r2, [pc, #208]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d03c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d08:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fa96 	bl	8001248 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7ff fa92 	bl	8001248 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0f2      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ef      	beq.n	8001d20 <HAL_RCC_OscConfig+0x418>
 8001d40:	e01b      	b.n	8001d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff fa79 	bl	8001248 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7ff fa75 	bl	8001248 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0d5      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80c9 	beq.w	8001f16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	f000 8083 	beq.w	8001e98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d15e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff fa4f 	bl	8001248 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff fa4b 	bl	8001248 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d905      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0ab      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	4b55      	ldr	r3, [pc, #340]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4b52      	ldr	r3, [pc, #328]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b52      	ldr	r3, [pc, #328]	@ (8001f24 <HAL_RCC_OscConfig+0x61c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6a11      	ldr	r1, [r2, #32]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001de4:	3a01      	subs	r2, #1
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001dee:	0212      	lsls	r2, r2, #8
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0652      	lsls	r2, r2, #25
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e0e:	06d2      	lsls	r2, r2, #27
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4943      	ldr	r1, [pc, #268]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a40      	ldr	r2, [pc, #256]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a3d      	ldr	r2, [pc, #244]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa0a 	bl	8001248 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa06 	bl	8001248 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e066      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x530>
 8001e56:	e05e      	b.n	8001f16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f9f0 	bl	8001248 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f9ec 	bl	8001248 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04c      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e8a:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4924      	ldr	r1, [pc, #144]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <HAL_RCC_OscConfig+0x620>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60cb      	str	r3, [r1, #12]
 8001e96:	e03e      	b.n	8001f16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e039      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d12c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d123      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d11b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d113      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	019f800c 	.word	0x019f800c
 8001f28:	feeefffc 	.word	0xfeeefffc

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e11e      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b91      	ldr	r3, [pc, #580]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b8e      	ldr	r3, [pc, #568]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 020f 	bic.w	r2, r3, #15
 8001f5a:	498c      	ldr	r1, [pc, #560]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b8a      	ldr	r3, [pc, #552]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e106      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d073      	beq.n	8002068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0f4      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f98:	f000 f966 	bl	8002268 <RCC_GetSysClockFreqFromPLLSource>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8002194 <HAL_RCC_ClockConfig+0x268>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d93f      	bls.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d033      	beq.n	8002026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12f      	bne.n	8002026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fc6:	4b72      	ldr	r3, [pc, #456]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fce:	4a70      	ldr	r2, [pc, #448]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e024      	b.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0c6      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0be      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002004:	f000 f8ce 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4a61      	ldr	r2, [pc, #388]	@ (8002194 <HAL_RCC_ClockConfig+0x268>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d909      	bls.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002012:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800201a:	4a5d      	ldr	r2, [pc, #372]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b5a      	ldr	r3, [pc, #360]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4957      	ldr	r1, [pc, #348]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7ff f906 	bl	8001248 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff f902 	bl	8001248 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e095      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d023      	beq.n	80020bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a42      	ldr	r2, [pc, #264]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800208a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002098:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4936      	ldr	r1, [pc, #216]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
 80020ba:	e008      	b.n	80020ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b80      	cmp	r3, #128	@ 0x80
 80020c0:	d105      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ce:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d21d      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	4929      	ldr	r1, [pc, #164]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020ec:	f7ff f8ac 	bl	8001248 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7ff f8a8 	bl	8001248 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e03b      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_RCC_ClockConfig+0x260>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d1ed      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4917      	ldr	r1, [pc, #92]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490f      	ldr	r1, [pc, #60]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002156:	f000 f825 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <HAL_RCC_ClockConfig+0x264>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490c      	ldr	r1, [pc, #48]	@ (8002198 <HAL_RCC_ClockConfig+0x26c>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x270>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f818 	bl	80011b0 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	04c4b400 	.word	0x04c4b400
 8002198:	080049c8 	.word	0x080049c8
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021aa:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e047      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c8:	4b26      	ldr	r3, [pc, #152]	@ (8002264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e03e      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021ce:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d136      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002202:	68d2      	ldr	r2, [r2, #12]
 8002204:	0a12      	lsrs	r2, r2, #8
 8002206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
      break;
 8002210:	e00c      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002212:	4a13      	ldr	r2, [pc, #76]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	0a12      	lsrs	r2, r2, #8
 8002220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      break;
 800222a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0e5b      	lsrs	r3, r3, #25
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e001      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800224c:	693b      	ldr	r3, [r7, #16]
}
 800224e:	4618      	mov	r0, r3
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	00f42400 	.word	0x00f42400
 8002264:	00b71b00 	.word	0x00b71b00

08002268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d10c      	bne.n	80022a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002296:	68d2      	ldr	r2, [r2, #12]
 8002298:	0a12      	lsrs	r2, r2, #8
 800229a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
    break;
 80022a4:	e00c      	b.n	80022c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a6:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4a0e      	ldr	r2, [pc, #56]	@ (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	0a12      	lsrs	r2, r2, #8
 80022b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    break;
 80022be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	00b71b00 	.word	0x00b71b00
 80022f0:	00f42400 	.word	0x00f42400

080022f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e049      	b.n	800239a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fe50 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f000 fc98 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e049      	b.n	8002448 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f841 	bl	8002450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f000 fc41 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_TIM_PWM_Start+0x24>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e03c      	b.n	8002502 <HAL_TIM_PWM_Start+0x9e>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d109      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x3e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	e02f      	b.n	8002502 <HAL_TIM_PWM_Start+0x9e>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d109      	bne.n	80024bc <HAL_TIM_PWM_Start+0x58>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e022      	b.n	8002502 <HAL_TIM_PWM_Start+0x9e>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d109      	bne.n	80024d6 <HAL_TIM_PWM_Start+0x72>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e015      	b.n	8002502 <HAL_TIM_PWM_Start+0x9e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d109      	bne.n	80024f0 <HAL_TIM_PWM_Start+0x8c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e008      	b.n	8002502 <HAL_TIM_PWM_Start+0x9e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e097      	b.n	800263a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <HAL_TIM_PWM_Start+0xb6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002518:	e023      	b.n	8002562 <HAL_TIM_PWM_Start+0xfe>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d104      	bne.n	800252a <HAL_TIM_PWM_Start+0xc6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002528:	e01b      	b.n	8002562 <HAL_TIM_PWM_Start+0xfe>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d104      	bne.n	800253a <HAL_TIM_PWM_Start+0xd6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002538:	e013      	b.n	8002562 <HAL_TIM_PWM_Start+0xfe>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d104      	bne.n	800254a <HAL_TIM_PWM_Start+0xe6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002548:	e00b      	b.n	8002562 <HAL_TIM_PWM_Start+0xfe>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b10      	cmp	r3, #16
 800254e:	d104      	bne.n	800255a <HAL_TIM_PWM_Start+0xf6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002558:	e003      	b.n	8002562 <HAL_TIM_PWM_Start+0xfe>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f001 f8c8 	bl	8003700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a33      	ldr	r2, [pc, #204]	@ (8002644 <HAL_TIM_PWM_Start+0x1e0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x13e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <HAL_TIM_PWM_Start+0x1e4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x13e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a30      	ldr	r2, [pc, #192]	@ (800264c <HAL_TIM_PWM_Start+0x1e8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x13e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2f      	ldr	r2, [pc, #188]	@ (8002650 <HAL_TIM_PWM_Start+0x1ec>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x13e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2d      	ldr	r2, [pc, #180]	@ (8002654 <HAL_TIM_PWM_Start+0x1f0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x142>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_PWM_Start+0x144>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a20      	ldr	r2, [pc, #128]	@ (8002644 <HAL_TIM_PWM_Start+0x1e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d018      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x194>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ce:	d013      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x194>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <HAL_TIM_PWM_Start+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x194>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_TIM_PWM_Start+0x1f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x194>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_TIM_PWM_Start+0x1e4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x194>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_TIM_PWM_Start+0x1e8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d115      	bne.n	8002624 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_TIM_PWM_Start+0x1fc>)
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d015      	beq.n	8002636 <HAL_TIM_PWM_Start+0x1d2>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002610:	d011      	beq.n	8002636 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	e008      	b.n	8002636 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e000      	b.n	8002638 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40013400 	.word	0x40013400
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	00010007 	.word	0x00010007

08002664 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e049      	b.n	800270a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fcb6 	bl	8000ffc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 fae0 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_IC_ConfigChannel+0x1e>
 800272c:	2302      	movs	r3, #2
 800272e:	e088      	b.n	8002842 <HAL_TIM_IC_ConfigChannel+0x130>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11b      	bne.n	8002776 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800274e:	f000 fe1d 	bl	800338c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 020c 	bic.w	r2, r2, #12
 8002760:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6999      	ldr	r1, [r3, #24]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	619a      	str	r2, [r3, #24]
 8002774:	e060      	b.n	8002838 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11c      	bne.n	80027b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800278c:	f000 fe95 	bl	80034ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800279e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6999      	ldr	r1, [r3, #24]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	021a      	lsls	r2, r3, #8
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	619a      	str	r2, [r3, #24]
 80027b4:	e040      	b.n	8002838 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80027cc:	f000 fee2 	bl	8003594 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020c 	bic.w	r2, r2, #12
 80027de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69d9      	ldr	r1, [r3, #28]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	61da      	str	r2, [r3, #28]
 80027f2:	e021      	b.n	8002838 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d11c      	bne.n	8002834 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800280a:	f000 feff 	bl	800360c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800281c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	e001      	b.n	8002838 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002840:	7dfb      	ldrb	r3, [r7, #23]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ff      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b14      	cmp	r3, #20
 8002876:	f200 80f0 	bhi.w	8002a5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	080028d5 	.word	0x080028d5
 8002884:	08002a5b 	.word	0x08002a5b
 8002888:	08002a5b 	.word	0x08002a5b
 800288c:	08002a5b 	.word	0x08002a5b
 8002890:	08002915 	.word	0x08002915
 8002894:	08002a5b 	.word	0x08002a5b
 8002898:	08002a5b 	.word	0x08002a5b
 800289c:	08002a5b 	.word	0x08002a5b
 80028a0:	08002957 	.word	0x08002957
 80028a4:	08002a5b 	.word	0x08002a5b
 80028a8:	08002a5b 	.word	0x08002a5b
 80028ac:	08002a5b 	.word	0x08002a5b
 80028b0:	08002997 	.word	0x08002997
 80028b4:	08002a5b 	.word	0x08002a5b
 80028b8:	08002a5b 	.word	0x08002a5b
 80028bc:	08002a5b 	.word	0x08002a5b
 80028c0:	080029d9 	.word	0x080029d9
 80028c4:	08002a5b 	.word	0x08002a5b
 80028c8:	08002a5b 	.word	0x08002a5b
 80028cc:	08002a5b 	.word	0x08002a5b
 80028d0:	08002a19 	.word	0x08002a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fa60 	bl	8002da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0208 	orr.w	r2, r2, #8
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	619a      	str	r2, [r3, #24]
      break;
 8002912:	e0a5      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fad0 	bl	8002ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6999      	ldr	r1, [r3, #24]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	619a      	str	r2, [r3, #24]
      break;
 8002954:	e084      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fb39 	bl	8002fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0208 	orr.w	r2, r2, #8
 8002970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0204 	bic.w	r2, r2, #4
 8002980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	61da      	str	r2, [r3, #28]
      break;
 8002994:	e064      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fba1 	bl	80030e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	61da      	str	r2, [r3, #28]
      break;
 80029d6:	e043      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fc0a 	bl	80031f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a16:	e023      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fc4e 	bl	80032c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop

08002a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_ConfigClockSource+0x1c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e0de      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x1da>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a63      	ldr	r2, [pc, #396]	@ (8002c58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	f000 80a9 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ad0:	4a61      	ldr	r2, [pc, #388]	@ (8002c58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f200 80ae 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ad8:	4a60      	ldr	r2, [pc, #384]	@ (8002c5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f000 80a1 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f200 80a6 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ae8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	f000 8099 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002af0:	4a5b      	ldr	r2, [pc, #364]	@ (8002c60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	f200 809e 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002af8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f000 8091 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b00:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f200 8096 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b0c:	f000 8089 	beq.w	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b14:	f200 808e 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1c:	d03e      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0x128>
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b22:	f200 8087 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2a:	f000 8086 	beq.w	8002c3a <HAL_TIM_ConfigClockSource+0x1c6>
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b32:	d87f      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b34:	2b70      	cmp	r3, #112	@ 0x70
 8002b36:	d01a      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0xfa>
 8002b38:	2b70      	cmp	r3, #112	@ 0x70
 8002b3a:	d87b      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b3c:	2b60      	cmp	r3, #96	@ 0x60
 8002b3e:	d050      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x16e>
 8002b40:	2b60      	cmp	r3, #96	@ 0x60
 8002b42:	d877      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b44:	2b50      	cmp	r3, #80	@ 0x50
 8002b46:	d03c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x14e>
 8002b48:	2b50      	cmp	r3, #80	@ 0x50
 8002b4a:	d873      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d058      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x18e>
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d86f      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b54:	2b30      	cmp	r3, #48	@ 0x30
 8002b56:	d064      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b58:	2b30      	cmp	r3, #48	@ 0x30
 8002b5a:	d86b      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d060      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d867      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05c      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d05a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b6c:	e062      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	f000 fd9f 	bl	80036c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	609a      	str	r2, [r3, #8]
      break;
 8002b9a:	e04f      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	f000 fd88 	bl	80036c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bbe:	609a      	str	r2, [r3, #8]
      break;
 8002bc0:	e03c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f000 fc44 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2150      	movs	r1, #80	@ 0x50
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fd53 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8002be0:	e02c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fca0 	bl	8003534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2160      	movs	r1, #96	@ 0x60
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd43 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8002c00:	e01c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 fc24 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fd33 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8002c20:	e00c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f000 fd2a 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 8002c32:	e003      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e000      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00100070 	.word	0x00100070
 8002c5c:	00100040 	.word	0x00100040
 8002c60:	00100030 	.word	0x00100030
 8002c64:	00100020 	.word	0x00100020

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a42      	ldr	r2, [pc, #264]	@ (8002d84 <TIM_Base_SetConfig+0x11c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00f      	beq.n	8002ca0 <TIM_Base_SetConfig+0x38>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c86:	d00b      	beq.n	8002ca0 <TIM_Base_SetConfig+0x38>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d88 <TIM_Base_SetConfig+0x120>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_Base_SetConfig+0x38>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <TIM_Base_SetConfig+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d90 <TIM_Base_SetConfig+0x128>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	@ (8002d84 <TIM_Base_SetConfig+0x11c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d017      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <TIM_Base_SetConfig+0x120>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d8c <TIM_Base_SetConfig+0x124>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d90 <TIM_Base_SetConfig+0x128>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d94 <TIM_Base_SetConfig+0x12c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <TIM_Base_SetConfig+0x130>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	@ (8002d9c <TIM_Base_SetConfig+0x134>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <TIM_Base_SetConfig+0x11c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0xe8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <TIM_Base_SetConfig+0x128>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0xe8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <TIM_Base_SetConfig+0x12c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0xe8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <TIM_Base_SetConfig+0x130>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0xe8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <TIM_Base_SetConfig+0x134>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 0201 	bic.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]
  }
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40013400 	.word	0x40013400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800

08002da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f023 0201 	bic.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0302 	bic.w	r3, r3, #2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8002eac <TIM_OC1_SetConfig+0x10c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00f      	beq.n	8002e20 <TIM_OC1_SetConfig+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <TIM_OC1_SetConfig+0x110>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <TIM_OC1_SetConfig+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb4 <TIM_OC1_SetConfig+0x114>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <TIM_OC1_SetConfig+0x80>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a29      	ldr	r2, [pc, #164]	@ (8002eb8 <TIM_OC1_SetConfig+0x118>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_OC1_SetConfig+0x80>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a28      	ldr	r2, [pc, #160]	@ (8002ebc <TIM_OC1_SetConfig+0x11c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0308 	bic.w	r3, r3, #8
 8002e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <TIM_OC1_SetConfig+0x10c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00f      	beq.n	8002e62 <TIM_OC1_SetConfig+0xc2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb0 <TIM_OC1_SetConfig+0x110>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_OC1_SetConfig+0xc2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <TIM_OC1_SetConfig+0x114>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_OC1_SetConfig+0xc2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a18      	ldr	r2, [pc, #96]	@ (8002eb8 <TIM_OC1_SetConfig+0x118>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_OC1_SetConfig+0xc2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <TIM_OC1_SetConfig+0x11c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d111      	bne.n	8002e86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	621a      	str	r2, [r3, #32]
}
 8002ea0:	bf00      	nop
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800

08002ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 0210 	bic.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0320 	bic.w	r3, r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <TIM_OC2_SetConfig+0x100>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC2_SetConfig+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <TIM_OC2_SetConfig+0x104>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <TIM_OC2_SetConfig+0x100>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <TIM_OC2_SetConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <TIM_OC2_SetConfig+0x104>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_OC2_SetConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <TIM_OC2_SetConfig+0x108>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_OC2_SetConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <TIM_OC2_SetConfig+0x10c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_OC2_SetConfig+0xb0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <TIM_OC2_SetConfig+0x110>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d113      	bne.n	8002f98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40013400 	.word	0x40013400
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400
 8002fd0:	40014800 	.word	0x40014800

08002fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <TIM_OC3_SetConfig+0xfc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_OC3_SetConfig+0x6a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a26      	ldr	r2, [pc, #152]	@ (80030d4 <TIM_OC3_SetConfig+0x100>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10d      	bne.n	800305a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <TIM_OC3_SetConfig+0xfc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00f      	beq.n	8003082 <TIM_OC3_SetConfig+0xae>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <TIM_OC3_SetConfig+0x100>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_OC3_SetConfig+0xae>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <TIM_OC3_SetConfig+0x104>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <TIM_OC3_SetConfig+0xae>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <TIM_OC3_SetConfig+0x108>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_OC3_SetConfig+0xae>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <TIM_OC3_SetConfig+0x10c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d113      	bne.n	80030aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40013400 	.word	0x40013400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800

080030e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <TIM_OC4_SetConfig+0x100>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_OC4_SetConfig+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a27      	ldr	r2, [pc, #156]	@ (80031e8 <TIM_OC4_SetConfig+0x104>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10d      	bne.n	800316c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	031b      	lsls	r3, r3, #12
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800316a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <TIM_OC4_SetConfig+0x100>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00f      	beq.n	8003194 <TIM_OC4_SetConfig+0xb0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <TIM_OC4_SetConfig+0x104>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00b      	beq.n	8003194 <TIM_OC4_SetConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <TIM_OC4_SetConfig+0x108>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <TIM_OC4_SetConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1a      	ldr	r2, [pc, #104]	@ (80031f0 <TIM_OC4_SetConfig+0x10c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_OC4_SetConfig+0xb0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a19      	ldr	r2, [pc, #100]	@ (80031f4 <TIM_OC4_SetConfig+0x110>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d113      	bne.n	80031bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800319a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40013400 	.word	0x40013400
 80031ec:	40014000 	.word	0x40014000
 80031f0:	40014400 	.word	0x40014400
 80031f4:	40014800 	.word	0x40014800

080031f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800323c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <TIM_OC5_SetConfig+0xb4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_OC5_SetConfig+0x7a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <TIM_OC5_SetConfig+0xb8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_OC5_SetConfig+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <TIM_OC5_SetConfig+0xbc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_OC5_SetConfig+0x7a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <TIM_OC5_SetConfig+0xc0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_OC5_SetConfig+0x7a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <TIM_OC5_SetConfig+0xc4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d109      	bne.n	8003286 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800

080032c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	051b      	lsls	r3, r3, #20
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <TIM_OC6_SetConfig+0xb8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00f      	beq.n	800333c <TIM_OC6_SetConfig+0x7c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a17      	ldr	r2, [pc, #92]	@ (800337c <TIM_OC6_SetConfig+0xbc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00b      	beq.n	800333c <TIM_OC6_SetConfig+0x7c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <TIM_OC6_SetConfig+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d007      	beq.n	800333c <TIM_OC6_SetConfig+0x7c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a15      	ldr	r2, [pc, #84]	@ (8003384 <TIM_OC6_SetConfig+0xc4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC6_SetConfig+0x7c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a14      	ldr	r2, [pc, #80]	@ (8003388 <TIM_OC6_SetConfig+0xc8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d109      	bne.n	8003350 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f023 0201 	bic.w	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <TIM_TI1_SetConfig+0xbc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_TI1_SetConfig+0x56>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c0:	d00f      	beq.n	80033e2 <TIM_TI1_SetConfig+0x56>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a21      	ldr	r2, [pc, #132]	@ (800344c <TIM_TI1_SetConfig+0xc0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_TI1_SetConfig+0x56>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a20      	ldr	r2, [pc, #128]	@ (8003450 <TIM_TI1_SetConfig+0xc4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_TI1_SetConfig+0x56>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <TIM_TI1_SetConfig+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_TI1_SetConfig+0x56>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <TIM_TI1_SetConfig+0xcc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <TIM_TI1_SetConfig+0x5a>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <TIM_TI1_SetConfig+0x5c>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e003      	b.n	8003406 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800340c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	b2db      	uxtb	r3, r3
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f023 030a 	bic.w	r3, r3, #10
 8003420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 030a 	and.w	r3, r3, #10
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000

0800345c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 030a 	bic.w	r3, r3, #10
 8003498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0210 	bic.w	r2, r3, #16
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	b29b      	uxth	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800350c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800355e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003638:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800364a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	031b      	lsls	r3, r3, #12
 8003650:	b29b      	uxth	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	031b      	lsls	r3, r3, #12
 8003664:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800369c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 0307 	orr.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e065      	b.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2c      	ldr	r2, [pc, #176]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2b      	ldr	r2, [pc, #172]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d108      	bne.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800379e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80037b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037da:	d013      	beq.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a13      	ldr	r2, [pc, #76]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10c      	bne.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800380a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	4313      	orrs	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40013400 	.word	0x40013400
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40014000 	.word	0x40014000

08003850 <memset>:
 8003850:	4402      	add	r2, r0
 8003852:	4603      	mov	r3, r0
 8003854:	4293      	cmp	r3, r2
 8003856:	d100      	bne.n	800385a <memset+0xa>
 8003858:	4770      	bx	lr
 800385a:	f803 1b01 	strb.w	r1, [r3], #1
 800385e:	e7f9      	b.n	8003854 <memset+0x4>

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4d0d      	ldr	r5, [pc, #52]	@ (8003898 <__libc_init_array+0x38>)
 8003864:	4c0d      	ldr	r4, [pc, #52]	@ (800389c <__libc_init_array+0x3c>)
 8003866:	1b64      	subs	r4, r4, r5
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	2600      	movs	r6, #0
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	4d0b      	ldr	r5, [pc, #44]	@ (80038a0 <__libc_init_array+0x40>)
 8003872:	4c0c      	ldr	r4, [pc, #48]	@ (80038a4 <__libc_init_array+0x44>)
 8003874:	f001 f89c 	bl	80049b0 <_init>
 8003878:	1b64      	subs	r4, r4, r5
 800387a:	10a4      	asrs	r4, r4, #2
 800387c:	2600      	movs	r6, #0
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08004bb0 	.word	0x08004bb0
 800389c:	08004bb0 	.word	0x08004bb0
 80038a0:	08004bb0 	.word	0x08004bb0
 80038a4:	08004bb4 	.word	0x08004bb4

080038a8 <cos>:
 80038a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038aa:	ec53 2b10 	vmov	r2, r3, d0
 80038ae:	4826      	ldr	r0, [pc, #152]	@ (8003948 <cos+0xa0>)
 80038b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038b4:	4281      	cmp	r1, r0
 80038b6:	d806      	bhi.n	80038c6 <cos+0x1e>
 80038b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003940 <cos+0x98>
 80038bc:	b005      	add	sp, #20
 80038be:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c2:	f000 b899 	b.w	80039f8 <__kernel_cos>
 80038c6:	4821      	ldr	r0, [pc, #132]	@ (800394c <cos+0xa4>)
 80038c8:	4281      	cmp	r1, r0
 80038ca:	d908      	bls.n	80038de <cos+0x36>
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fc fdd0 	bl	8000474 <__aeabi_dsub>
 80038d4:	ec41 0b10 	vmov	d0, r0, r1
 80038d8:	b005      	add	sp, #20
 80038da:	f85d fb04 	ldr.w	pc, [sp], #4
 80038de:	4668      	mov	r0, sp
 80038e0:	f000 fa0e 	bl	8003d00 <__ieee754_rem_pio2>
 80038e4:	f000 0003 	and.w	r0, r0, #3
 80038e8:	2801      	cmp	r0, #1
 80038ea:	d00b      	beq.n	8003904 <cos+0x5c>
 80038ec:	2802      	cmp	r0, #2
 80038ee:	d015      	beq.n	800391c <cos+0x74>
 80038f0:	b9d8      	cbnz	r0, 800392a <cos+0x82>
 80038f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80038f6:	ed9d 0b00 	vldr	d0, [sp]
 80038fa:	f000 f87d 	bl	80039f8 <__kernel_cos>
 80038fe:	ec51 0b10 	vmov	r0, r1, d0
 8003902:	e7e7      	b.n	80038d4 <cos+0x2c>
 8003904:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003908:	ed9d 0b00 	vldr	d0, [sp]
 800390c:	f000 f93c 	bl	8003b88 <__kernel_sin>
 8003910:	ec53 2b10 	vmov	r2, r3, d0
 8003914:	4610      	mov	r0, r2
 8003916:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800391a:	e7db      	b.n	80038d4 <cos+0x2c>
 800391c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003920:	ed9d 0b00 	vldr	d0, [sp]
 8003924:	f000 f868 	bl	80039f8 <__kernel_cos>
 8003928:	e7f2      	b.n	8003910 <cos+0x68>
 800392a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800392e:	ed9d 0b00 	vldr	d0, [sp]
 8003932:	2001      	movs	r0, #1
 8003934:	f000 f928 	bl	8003b88 <__kernel_sin>
 8003938:	e7e1      	b.n	80038fe <cos+0x56>
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w
	...
 8003948:	3fe921fb 	.word	0x3fe921fb
 800394c:	7fefffff 	.word	0x7fefffff

08003950 <sin>:
 8003950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003952:	ec53 2b10 	vmov	r2, r3, d0
 8003956:	4826      	ldr	r0, [pc, #152]	@ (80039f0 <sin+0xa0>)
 8003958:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800395c:	4281      	cmp	r1, r0
 800395e:	d807      	bhi.n	8003970 <sin+0x20>
 8003960:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80039e8 <sin+0x98>
 8003964:	2000      	movs	r0, #0
 8003966:	b005      	add	sp, #20
 8003968:	f85d eb04 	ldr.w	lr, [sp], #4
 800396c:	f000 b90c 	b.w	8003b88 <__kernel_sin>
 8003970:	4820      	ldr	r0, [pc, #128]	@ (80039f4 <sin+0xa4>)
 8003972:	4281      	cmp	r1, r0
 8003974:	d908      	bls.n	8003988 <sin+0x38>
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fc fd7b 	bl	8000474 <__aeabi_dsub>
 800397e:	ec41 0b10 	vmov	d0, r0, r1
 8003982:	b005      	add	sp, #20
 8003984:	f85d fb04 	ldr.w	pc, [sp], #4
 8003988:	4668      	mov	r0, sp
 800398a:	f000 f9b9 	bl	8003d00 <__ieee754_rem_pio2>
 800398e:	f000 0003 	and.w	r0, r0, #3
 8003992:	2801      	cmp	r0, #1
 8003994:	d00c      	beq.n	80039b0 <sin+0x60>
 8003996:	2802      	cmp	r0, #2
 8003998:	d011      	beq.n	80039be <sin+0x6e>
 800399a:	b9e8      	cbnz	r0, 80039d8 <sin+0x88>
 800399c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039a0:	ed9d 0b00 	vldr	d0, [sp]
 80039a4:	2001      	movs	r0, #1
 80039a6:	f000 f8ef 	bl	8003b88 <__kernel_sin>
 80039aa:	ec51 0b10 	vmov	r0, r1, d0
 80039ae:	e7e6      	b.n	800397e <sin+0x2e>
 80039b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039b4:	ed9d 0b00 	vldr	d0, [sp]
 80039b8:	f000 f81e 	bl	80039f8 <__kernel_cos>
 80039bc:	e7f5      	b.n	80039aa <sin+0x5a>
 80039be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039c2:	ed9d 0b00 	vldr	d0, [sp]
 80039c6:	2001      	movs	r0, #1
 80039c8:	f000 f8de 	bl	8003b88 <__kernel_sin>
 80039cc:	ec53 2b10 	vmov	r2, r3, d0
 80039d0:	4610      	mov	r0, r2
 80039d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80039d6:	e7d2      	b.n	800397e <sin+0x2e>
 80039d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039dc:	ed9d 0b00 	vldr	d0, [sp]
 80039e0:	f000 f80a 	bl	80039f8 <__kernel_cos>
 80039e4:	e7f2      	b.n	80039cc <sin+0x7c>
 80039e6:	bf00      	nop
	...
 80039f0:	3fe921fb 	.word	0x3fe921fb
 80039f4:	7fefffff 	.word	0x7fefffff

080039f8 <__kernel_cos>:
 80039f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	ec57 6b10 	vmov	r6, r7, d0
 8003a00:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003a04:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003a08:	ed8d 1b00 	vstr	d1, [sp]
 8003a0c:	d206      	bcs.n	8003a1c <__kernel_cos+0x24>
 8003a0e:	4630      	mov	r0, r6
 8003a10:	4639      	mov	r1, r7
 8003a12:	f7fc ff6f 	bl	80008f4 <__aeabi_d2iz>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	f000 8088 	beq.w	8003b2c <__kernel_cos+0x134>
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	463b      	mov	r3, r7
 8003a20:	4630      	mov	r0, r6
 8003a22:	4639      	mov	r1, r7
 8003a24:	f7fc fbf8 	bl	8000218 <__aeabi_dmul>
 8003a28:	4b51      	ldr	r3, [pc, #324]	@ (8003b70 <__kernel_cos+0x178>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	460d      	mov	r5, r1
 8003a30:	f7fc fbf2 	bl	8000218 <__aeabi_dmul>
 8003a34:	a340      	add	r3, pc, #256	@ (adr r3, 8003b38 <__kernel_cos+0x140>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	4682      	mov	sl, r0
 8003a3c:	468b      	mov	fp, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fbe9 	bl	8000218 <__aeabi_dmul>
 8003a46:	a33e      	add	r3, pc, #248	@ (adr r3, 8003b40 <__kernel_cos+0x148>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fc fd14 	bl	8000478 <__adddf3>
 8003a50:	4622      	mov	r2, r4
 8003a52:	462b      	mov	r3, r5
 8003a54:	f7fc fbe0 	bl	8000218 <__aeabi_dmul>
 8003a58:	a33b      	add	r3, pc, #236	@ (adr r3, 8003b48 <__kernel_cos+0x150>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fd09 	bl	8000474 <__aeabi_dsub>
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	f7fc fbd7 	bl	8000218 <__aeabi_dmul>
 8003a6a:	a339      	add	r3, pc, #228	@ (adr r3, 8003b50 <__kernel_cos+0x158>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fd02 	bl	8000478 <__adddf3>
 8003a74:	4622      	mov	r2, r4
 8003a76:	462b      	mov	r3, r5
 8003a78:	f7fc fbce 	bl	8000218 <__aeabi_dmul>
 8003a7c:	a336      	add	r3, pc, #216	@ (adr r3, 8003b58 <__kernel_cos+0x160>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f7fc fcf7 	bl	8000474 <__aeabi_dsub>
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f7fc fbc5 	bl	8000218 <__aeabi_dmul>
 8003a8e:	a334      	add	r3, pc, #208	@ (adr r3, 8003b60 <__kernel_cos+0x168>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fcf0 	bl	8000478 <__adddf3>
 8003a98:	4622      	mov	r2, r4
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	f7fc fbbc 	bl	8000218 <__aeabi_dmul>
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	f7fc fbb8 	bl	8000218 <__aeabi_dmul>
 8003aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aac:	4604      	mov	r4, r0
 8003aae:	460d      	mov	r5, r1
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fc fbb0 	bl	8000218 <__aeabi_dmul>
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4602      	mov	r2, r0
 8003abc:	4629      	mov	r1, r5
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7fc fcd8 	bl	8000474 <__aeabi_dsub>
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <__kernel_cos+0x17c>)
 8003ac6:	4598      	cmp	r8, r3
 8003ac8:	4606      	mov	r6, r0
 8003aca:	460f      	mov	r7, r1
 8003acc:	d810      	bhi.n	8003af0 <__kernel_cos+0xf8>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	f7fc fccd 	bl	8000474 <__aeabi_dsub>
 8003ada:	460b      	mov	r3, r1
 8003adc:	4926      	ldr	r1, [pc, #152]	@ (8003b78 <__kernel_cos+0x180>)
 8003ade:	4602      	mov	r2, r0
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7fc fcc7 	bl	8000474 <__aeabi_dsub>
 8003ae6:	ec41 0b10 	vmov	d0, r0, r1
 8003aea:	b003      	add	sp, #12
 8003aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af0:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <__kernel_cos+0x184>)
 8003af2:	4921      	ldr	r1, [pc, #132]	@ (8003b78 <__kernel_cos+0x180>)
 8003af4:	4598      	cmp	r8, r3
 8003af6:	bf8c      	ite	hi
 8003af8:	4d21      	ldrhi	r5, [pc, #132]	@ (8003b80 <__kernel_cos+0x188>)
 8003afa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003afe:	2400      	movs	r4, #0
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fc fcb5 	bl	8000474 <__aeabi_dsub>
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	4689      	mov	r9, r1
 8003b10:	462b      	mov	r3, r5
 8003b12:	4650      	mov	r0, sl
 8003b14:	4659      	mov	r1, fp
 8003b16:	f7fc fcad 	bl	8000474 <__aeabi_dsub>
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	f7fc fca9 	bl	8000474 <__aeabi_dsub>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4640      	mov	r0, r8
 8003b28:	4649      	mov	r1, r9
 8003b2a:	e7da      	b.n	8003ae2 <__kernel_cos+0xea>
 8003b2c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003b68 <__kernel_cos+0x170>
 8003b30:	e7db      	b.n	8003aea <__kernel_cos+0xf2>
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
 8003b38:	be8838d4 	.word	0xbe8838d4
 8003b3c:	bda8fae9 	.word	0xbda8fae9
 8003b40:	bdb4b1c4 	.word	0xbdb4b1c4
 8003b44:	3e21ee9e 	.word	0x3e21ee9e
 8003b48:	809c52ad 	.word	0x809c52ad
 8003b4c:	3e927e4f 	.word	0x3e927e4f
 8003b50:	19cb1590 	.word	0x19cb1590
 8003b54:	3efa01a0 	.word	0x3efa01a0
 8003b58:	16c15177 	.word	0x16c15177
 8003b5c:	3f56c16c 	.word	0x3f56c16c
 8003b60:	5555554c 	.word	0x5555554c
 8003b64:	3fa55555 	.word	0x3fa55555
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	3ff00000 	.word	0x3ff00000
 8003b70:	3fe00000 	.word	0x3fe00000
 8003b74:	3fd33332 	.word	0x3fd33332
 8003b78:	3ff00000 	.word	0x3ff00000
 8003b7c:	3fe90000 	.word	0x3fe90000
 8003b80:	3fd20000 	.word	0x3fd20000
 8003b84:	00000000 	.word	0x00000000

08003b88 <__kernel_sin>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	ec55 4b10 	vmov	r4, r5, d0
 8003b90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003b94:	b085      	sub	sp, #20
 8003b96:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003b9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003b9e:	4680      	mov	r8, r0
 8003ba0:	d205      	bcs.n	8003bae <__kernel_sin+0x26>
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7fc fea5 	bl	80008f4 <__aeabi_d2iz>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d052      	beq.n	8003c54 <__kernel_sin+0xcc>
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f7fc fb2f 	bl	8000218 <__aeabi_dmul>
 8003bba:	4682      	mov	sl, r0
 8003bbc:	468b      	mov	fp, r1
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fb27 	bl	8000218 <__aeabi_dmul>
 8003bca:	a342      	add	r3, pc, #264	@ (adr r3, 8003cd4 <__kernel_sin+0x14c>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	4659      	mov	r1, fp
 8003bd8:	f7fc fb1e 	bl	8000218 <__aeabi_dmul>
 8003bdc:	a33f      	add	r3, pc, #252	@ (adr r3, 8003cdc <__kernel_sin+0x154>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f7fc fc47 	bl	8000474 <__aeabi_dsub>
 8003be6:	4652      	mov	r2, sl
 8003be8:	465b      	mov	r3, fp
 8003bea:	f7fc fb15 	bl	8000218 <__aeabi_dmul>
 8003bee:	a33d      	add	r3, pc, #244	@ (adr r3, 8003ce4 <__kernel_sin+0x15c>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fc40 	bl	8000478 <__adddf3>
 8003bf8:	4652      	mov	r2, sl
 8003bfa:	465b      	mov	r3, fp
 8003bfc:	f7fc fb0c 	bl	8000218 <__aeabi_dmul>
 8003c00:	a33a      	add	r3, pc, #232	@ (adr r3, 8003cec <__kernel_sin+0x164>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc fc35 	bl	8000474 <__aeabi_dsub>
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	f7fc fb03 	bl	8000218 <__aeabi_dmul>
 8003c12:	a338      	add	r3, pc, #224	@ (adr r3, 8003cf4 <__kernel_sin+0x16c>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc fc2e 	bl	8000478 <__adddf3>
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	460f      	mov	r7, r1
 8003c20:	f1b8 0f00 	cmp.w	r8, #0
 8003c24:	d11b      	bne.n	8003c5e <__kernel_sin+0xd6>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	f7fc faf3 	bl	8000218 <__aeabi_dmul>
 8003c32:	a325      	add	r3, pc, #148	@ (adr r3, 8003cc8 <__kernel_sin+0x140>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fc1c 	bl	8000474 <__aeabi_dsub>
 8003c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c40:	f7fc faea 	bl	8000218 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fc14 	bl	8000478 <__adddf3>
 8003c50:	4604      	mov	r4, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	ec45 4b10 	vmov	d0, r4, r5
 8003c58:	b005      	add	sp, #20
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c62:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <__kernel_sin+0x148>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	f7fc fad7 	bl	8000218 <__aeabi_dmul>
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	4689      	mov	r9, r1
 8003c70:	463b      	mov	r3, r7
 8003c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c76:	f7fc facf 	bl	8000218 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4640      	mov	r0, r8
 8003c80:	4649      	mov	r1, r9
 8003c82:	f7fc fbf7 	bl	8000474 <__aeabi_dsub>
 8003c86:	4652      	mov	r2, sl
 8003c88:	465b      	mov	r3, fp
 8003c8a:	f7fc fac5 	bl	8000218 <__aeabi_dmul>
 8003c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c92:	f7fc fbef 	bl	8000474 <__aeabi_dsub>
 8003c96:	a30c      	add	r3, pc, #48	@ (adr r3, 8003cc8 <__kernel_sin+0x140>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ca4:	f7fc fab8 	bl	8000218 <__aeabi_dmul>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4630      	mov	r0, r6
 8003cae:	4639      	mov	r1, r7
 8003cb0:	f7fc fbe2 	bl	8000478 <__adddf3>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fbda 	bl	8000474 <__aeabi_dsub>
 8003cc0:	e7c6      	b.n	8003c50 <__kernel_sin+0xc8>
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	55555549 	.word	0x55555549
 8003ccc:	3fc55555 	.word	0x3fc55555
 8003cd0:	3fe00000 	.word	0x3fe00000
 8003cd4:	5acfd57c 	.word	0x5acfd57c
 8003cd8:	3de5d93a 	.word	0x3de5d93a
 8003cdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8003ce0:	3e5ae5e6 	.word	0x3e5ae5e6
 8003ce4:	57b1fe7d 	.word	0x57b1fe7d
 8003ce8:	3ec71de3 	.word	0x3ec71de3
 8003cec:	19c161d5 	.word	0x19c161d5
 8003cf0:	3f2a01a0 	.word	0x3f2a01a0
 8003cf4:	1110f8a6 	.word	0x1110f8a6
 8003cf8:	3f811111 	.word	0x3f811111
 8003cfc:	00000000 	.word	0x00000000

08003d00 <__ieee754_rem_pio2>:
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	ec57 6b10 	vmov	r6, r7, d0
 8003d08:	4bc5      	ldr	r3, [pc, #788]	@ (8004020 <__ieee754_rem_pio2+0x320>)
 8003d0a:	b08d      	sub	sp, #52	@ 0x34
 8003d0c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003d10:	4598      	cmp	r8, r3
 8003d12:	4604      	mov	r4, r0
 8003d14:	9704      	str	r7, [sp, #16]
 8003d16:	d807      	bhi.n	8003d28 <__ieee754_rem_pio2+0x28>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	ed80 0b00 	vstr	d0, [r0]
 8003d20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003d24:	2500      	movs	r5, #0
 8003d26:	e028      	b.n	8003d7a <__ieee754_rem_pio2+0x7a>
 8003d28:	4bbe      	ldr	r3, [pc, #760]	@ (8004024 <__ieee754_rem_pio2+0x324>)
 8003d2a:	4598      	cmp	r8, r3
 8003d2c:	d878      	bhi.n	8003e20 <__ieee754_rem_pio2+0x120>
 8003d2e:	9b04      	ldr	r3, [sp, #16]
 8003d30:	4dbd      	ldr	r5, [pc, #756]	@ (8004028 <__ieee754_rem_pio2+0x328>)
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	4630      	mov	r0, r6
 8003d36:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003fe8 <__ieee754_rem_pio2+0x2e8>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	4639      	mov	r1, r7
 8003d3e:	dd38      	ble.n	8003db2 <__ieee754_rem_pio2+0xb2>
 8003d40:	f7fc fb98 	bl	8000474 <__aeabi_dsub>
 8003d44:	45a8      	cmp	r8, r5
 8003d46:	4606      	mov	r6, r0
 8003d48:	460f      	mov	r7, r1
 8003d4a:	d01a      	beq.n	8003d82 <__ieee754_rem_pio2+0x82>
 8003d4c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003ff0 <__ieee754_rem_pio2+0x2f0>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fb8f 	bl	8000474 <__aeabi_dsub>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4680      	mov	r8, r0
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fb87 	bl	8000474 <__aeabi_dsub>
 8003d66:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003ff0 <__ieee754_rem_pio2+0x2f0>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f7fc fb82 	bl	8000474 <__aeabi_dsub>
 8003d70:	e9c4 8900 	strd	r8, r9, [r4]
 8003d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d78:	2501      	movs	r5, #1
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	b00d      	add	sp, #52	@ 0x34
 8003d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d82:	a39d      	add	r3, pc, #628	@ (adr r3, 8003ff8 <__ieee754_rem_pio2+0x2f8>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fb74 	bl	8000474 <__aeabi_dsub>
 8003d8c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004000 <__ieee754_rem_pio2+0x300>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	4606      	mov	r6, r0
 8003d94:	460f      	mov	r7, r1
 8003d96:	f7fc fb6d 	bl	8000474 <__aeabi_dsub>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4680      	mov	r8, r0
 8003da0:	4689      	mov	r9, r1
 8003da2:	4630      	mov	r0, r6
 8003da4:	4639      	mov	r1, r7
 8003da6:	f7fc fb65 	bl	8000474 <__aeabi_dsub>
 8003daa:	a395      	add	r3, pc, #596	@ (adr r3, 8004000 <__ieee754_rem_pio2+0x300>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	e7dc      	b.n	8003d6c <__ieee754_rem_pio2+0x6c>
 8003db2:	f7fc fb61 	bl	8000478 <__adddf3>
 8003db6:	45a8      	cmp	r8, r5
 8003db8:	4606      	mov	r6, r0
 8003dba:	460f      	mov	r7, r1
 8003dbc:	d018      	beq.n	8003df0 <__ieee754_rem_pio2+0xf0>
 8003dbe:	a38c      	add	r3, pc, #560	@ (adr r3, 8003ff0 <__ieee754_rem_pio2+0x2f0>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f7fc fb58 	bl	8000478 <__adddf3>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4680      	mov	r8, r0
 8003dce:	4689      	mov	r9, r1
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	f7fc fb4e 	bl	8000474 <__aeabi_dsub>
 8003dd8:	a385      	add	r3, pc, #532	@ (adr r3, 8003ff0 <__ieee754_rem_pio2+0x2f0>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fb4b 	bl	8000478 <__adddf3>
 8003de2:	f04f 35ff 	mov.w	r5, #4294967295
 8003de6:	e9c4 8900 	strd	r8, r9, [r4]
 8003dea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dee:	e7c4      	b.n	8003d7a <__ieee754_rem_pio2+0x7a>
 8003df0:	a381      	add	r3, pc, #516	@ (adr r3, 8003ff8 <__ieee754_rem_pio2+0x2f8>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f7fc fb3f 	bl	8000478 <__adddf3>
 8003dfa:	a381      	add	r3, pc, #516	@ (adr r3, 8004000 <__ieee754_rem_pio2+0x300>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	4606      	mov	r6, r0
 8003e02:	460f      	mov	r7, r1
 8003e04:	f7fc fb38 	bl	8000478 <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	4689      	mov	r9, r1
 8003e10:	4630      	mov	r0, r6
 8003e12:	4639      	mov	r1, r7
 8003e14:	f7fc fb2e 	bl	8000474 <__aeabi_dsub>
 8003e18:	a379      	add	r3, pc, #484	@ (adr r3, 8004000 <__ieee754_rem_pio2+0x300>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	e7de      	b.n	8003dde <__ieee754_rem_pio2+0xde>
 8003e20:	4b82      	ldr	r3, [pc, #520]	@ (800402c <__ieee754_rem_pio2+0x32c>)
 8003e22:	4598      	cmp	r8, r3
 8003e24:	f200 80d1 	bhi.w	8003fca <__ieee754_rem_pio2+0x2ca>
 8003e28:	f000 f966 	bl	80040f8 <fabs>
 8003e2c:	ec57 6b10 	vmov	r6, r7, d0
 8003e30:	a375      	add	r3, pc, #468	@ (adr r3, 8004008 <__ieee754_rem_pio2+0x308>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	f7fc f9ed 	bl	8000218 <__aeabi_dmul>
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004030 <__ieee754_rem_pio2+0x330>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	f7fc fb19 	bl	8000478 <__adddf3>
 8003e46:	f7fc fd55 	bl	80008f4 <__aeabi_d2iz>
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	f7fc fc60 	bl	8000710 <__aeabi_i2d>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e58:	a363      	add	r3, pc, #396	@ (adr r3, 8003fe8 <__ieee754_rem_pio2+0x2e8>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc f9db 	bl	8000218 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4630      	mov	r0, r6
 8003e68:	4639      	mov	r1, r7
 8003e6a:	f7fc fb03 	bl	8000474 <__aeabi_dsub>
 8003e6e:	a360      	add	r3, pc, #384	@ (adr r3, 8003ff0 <__ieee754_rem_pio2+0x2f0>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	4682      	mov	sl, r0
 8003e76:	468b      	mov	fp, r1
 8003e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7c:	f7fc f9cc 	bl	8000218 <__aeabi_dmul>
 8003e80:	2d1f      	cmp	r5, #31
 8003e82:	4606      	mov	r6, r0
 8003e84:	460f      	mov	r7, r1
 8003e86:	dc0c      	bgt.n	8003ea2 <__ieee754_rem_pio2+0x1a2>
 8003e88:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <__ieee754_rem_pio2+0x334>)
 8003e8a:	1e6a      	subs	r2, r5, #1
 8003e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e90:	4543      	cmp	r3, r8
 8003e92:	d006      	beq.n	8003ea2 <__ieee754_rem_pio2+0x1a2>
 8003e94:	4632      	mov	r2, r6
 8003e96:	463b      	mov	r3, r7
 8003e98:	4650      	mov	r0, sl
 8003e9a:	4659      	mov	r1, fp
 8003e9c:	f7fc faea 	bl	8000474 <__aeabi_dsub>
 8003ea0:	e00e      	b.n	8003ec0 <__ieee754_rem_pio2+0x1c0>
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	f7fc fae3 	bl	8000474 <__aeabi_dsub>
 8003eae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003eb8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	dc02      	bgt.n	8003ec6 <__ieee754_rem_pio2+0x1c6>
 8003ec0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ec4:	e039      	b.n	8003f3a <__ieee754_rem_pio2+0x23a>
 8003ec6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003ff8 <__ieee754_rem_pio2+0x2f8>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed0:	f7fc f9a2 	bl	8000218 <__aeabi_dmul>
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	460f      	mov	r7, r1
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4650      	mov	r0, sl
 8003ede:	4659      	mov	r1, fp
 8003ee0:	f7fc fac8 	bl	8000474 <__aeabi_dsub>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4680      	mov	r8, r0
 8003eea:	4689      	mov	r9, r1
 8003eec:	4650      	mov	r0, sl
 8003eee:	4659      	mov	r1, fp
 8003ef0:	f7fc fac0 	bl	8000474 <__aeabi_dsub>
 8003ef4:	4632      	mov	r2, r6
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	f7fc fabc 	bl	8000474 <__aeabi_dsub>
 8003efc:	a340      	add	r3, pc, #256	@ (adr r3, 8004000 <__ieee754_rem_pio2+0x300>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	4606      	mov	r6, r0
 8003f04:	460f      	mov	r7, r1
 8003f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f0a:	f7fc f985 	bl	8000218 <__aeabi_dmul>
 8003f0e:	4632      	mov	r2, r6
 8003f10:	463b      	mov	r3, r7
 8003f12:	f7fc faaf 	bl	8000474 <__aeabi_dsub>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	460f      	mov	r7, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc faa7 	bl	8000474 <__aeabi_dsub>
 8003f26:	9a05      	ldr	r2, [sp, #20]
 8003f28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b31      	cmp	r3, #49	@ 0x31
 8003f30:	dc20      	bgt.n	8003f74 <__ieee754_rem_pio2+0x274>
 8003f32:	e9c4 0100 	strd	r0, r1, [r4]
 8003f36:	46c2      	mov	sl, r8
 8003f38:	46cb      	mov	fp, r9
 8003f3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003f3e:	4650      	mov	r0, sl
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	4659      	mov	r1, fp
 8003f46:	f7fc fa95 	bl	8000474 <__aeabi_dsub>
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	f7fc fa91 	bl	8000474 <__aeabi_dsub>
 8003f52:	9b04      	ldr	r3, [sp, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f5a:	f6bf af0e 	bge.w	8003d7a <__ieee754_rem_pio2+0x7a>
 8003f5e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003f62:	6063      	str	r3, [r4, #4]
 8003f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f68:	f8c4 8000 	str.w	r8, [r4]
 8003f6c:	60a0      	str	r0, [r4, #8]
 8003f6e:	60e3      	str	r3, [r4, #12]
 8003f70:	426d      	negs	r5, r5
 8003f72:	e702      	b.n	8003d7a <__ieee754_rem_pio2+0x7a>
 8003f74:	a326      	add	r3, pc, #152	@ (adr r3, 8004010 <__ieee754_rem_pio2+0x310>)
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7e:	f7fc f94b 	bl	8000218 <__aeabi_dmul>
 8003f82:	4606      	mov	r6, r0
 8003f84:	460f      	mov	r7, r1
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f7fc fa71 	bl	8000474 <__aeabi_dsub>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4682      	mov	sl, r0
 8003f98:	468b      	mov	fp, r1
 8003f9a:	4640      	mov	r0, r8
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	f7fc fa69 	bl	8000474 <__aeabi_dsub>
 8003fa2:	4632      	mov	r2, r6
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	f7fc fa65 	bl	8000474 <__aeabi_dsub>
 8003faa:	a31b      	add	r3, pc, #108	@ (adr r3, 8004018 <__ieee754_rem_pio2+0x318>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	460f      	mov	r7, r1
 8003fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb8:	f7fc f92e 	bl	8000218 <__aeabi_dmul>
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	f7fc fa58 	bl	8000474 <__aeabi_dsub>
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	460f      	mov	r7, r1
 8003fc8:	e764      	b.n	8003e94 <__ieee754_rem_pio2+0x194>
 8003fca:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <__ieee754_rem_pio2+0x338>)
 8003fcc:	4598      	cmp	r8, r3
 8003fce:	d935      	bls.n	800403c <__ieee754_rem_pio2+0x33c>
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	f7fc fa4c 	bl	8000474 <__aeabi_dsub>
 8003fdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fe0:	e9c4 0100 	strd	r0, r1, [r4]
 8003fe4:	e69e      	b.n	8003d24 <__ieee754_rem_pio2+0x24>
 8003fe6:	bf00      	nop
 8003fe8:	54400000 	.word	0x54400000
 8003fec:	3ff921fb 	.word	0x3ff921fb
 8003ff0:	1a626331 	.word	0x1a626331
 8003ff4:	3dd0b461 	.word	0x3dd0b461
 8003ff8:	1a600000 	.word	0x1a600000
 8003ffc:	3dd0b461 	.word	0x3dd0b461
 8004000:	2e037073 	.word	0x2e037073
 8004004:	3ba3198a 	.word	0x3ba3198a
 8004008:	6dc9c883 	.word	0x6dc9c883
 800400c:	3fe45f30 	.word	0x3fe45f30
 8004010:	2e000000 	.word	0x2e000000
 8004014:	3ba3198a 	.word	0x3ba3198a
 8004018:	252049c1 	.word	0x252049c1
 800401c:	397b839a 	.word	0x397b839a
 8004020:	3fe921fb 	.word	0x3fe921fb
 8004024:	4002d97b 	.word	0x4002d97b
 8004028:	3ff921fb 	.word	0x3ff921fb
 800402c:	413921fb 	.word	0x413921fb
 8004030:	3fe00000 	.word	0x3fe00000
 8004034:	080049d8 	.word	0x080049d8
 8004038:	7fefffff 	.word	0x7fefffff
 800403c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004040:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004044:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004048:	4630      	mov	r0, r6
 800404a:	460f      	mov	r7, r1
 800404c:	f7fc fc52 	bl	80008f4 <__aeabi_d2iz>
 8004050:	f7fc fb5e 	bl	8000710 <__aeabi_i2d>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4630      	mov	r0, r6
 800405a:	4639      	mov	r1, r7
 800405c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004060:	f7fc fa08 	bl	8000474 <__aeabi_dsub>
 8004064:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <__ieee754_rem_pio2+0x3f0>)
 8004066:	2200      	movs	r2, #0
 8004068:	f7fc f8d6 	bl	8000218 <__aeabi_dmul>
 800406c:	460f      	mov	r7, r1
 800406e:	4606      	mov	r6, r0
 8004070:	f7fc fc40 	bl	80008f4 <__aeabi_d2iz>
 8004074:	f7fc fb4c 	bl	8000710 <__aeabi_i2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4630      	mov	r0, r6
 800407e:	4639      	mov	r1, r7
 8004080:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004084:	f7fc f9f6 	bl	8000474 <__aeabi_dsub>
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <__ieee754_rem_pio2+0x3f0>)
 800408a:	2200      	movs	r2, #0
 800408c:	f7fc f8c4 	bl	8000218 <__aeabi_dmul>
 8004090:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004094:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004098:	f04f 0803 	mov.w	r8, #3
 800409c:	2600      	movs	r6, #0
 800409e:	2700      	movs	r7, #0
 80040a0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80040a4:	4632      	mov	r2, r6
 80040a6:	463b      	mov	r3, r7
 80040a8:	46c2      	mov	sl, r8
 80040aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80040ae:	f7fc fbef 	bl	8000890 <__aeabi_dcmpeq>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d1f4      	bne.n	80040a0 <__ieee754_rem_pio2+0x3a0>
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <__ieee754_rem_pio2+0x3f4>)
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	2302      	movs	r3, #2
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462a      	mov	r2, r5
 80040c0:	4653      	mov	r3, sl
 80040c2:	4621      	mov	r1, r4
 80040c4:	a806      	add	r0, sp, #24
 80040c6:	f000 f81f 	bl	8004108 <__kernel_rem_pio2>
 80040ca:	9b04      	ldr	r3, [sp, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	4605      	mov	r5, r0
 80040d0:	f6bf ae53 	bge.w	8003d7a <__ieee754_rem_pio2+0x7a>
 80040d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80040d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040dc:	e9c4 2300 	strd	r2, r3, [r4]
 80040e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80040e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80040ec:	e740      	b.n	8003f70 <__ieee754_rem_pio2+0x270>
 80040ee:	bf00      	nop
 80040f0:	41700000 	.word	0x41700000
 80040f4:	08004a58 	.word	0x08004a58

080040f8 <fabs>:
 80040f8:	ec51 0b10 	vmov	r0, r1, d0
 80040fc:	4602      	mov	r2, r0
 80040fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004102:	ec43 2b10 	vmov	d0, r2, r3
 8004106:	4770      	bx	lr

08004108 <__kernel_rem_pio2>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	ed2d 8b02 	vpush	{d8}
 8004110:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004114:	f112 0f14 	cmn.w	r2, #20
 8004118:	9306      	str	r3, [sp, #24]
 800411a:	9104      	str	r1, [sp, #16]
 800411c:	4bbe      	ldr	r3, [pc, #760]	@ (8004418 <__kernel_rem_pio2+0x310>)
 800411e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004120:	9008      	str	r0, [sp, #32]
 8004122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	9b06      	ldr	r3, [sp, #24]
 800412a:	f103 33ff 	add.w	r3, r3, #4294967295
 800412e:	bfa8      	it	ge
 8004130:	1ed4      	subge	r4, r2, #3
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	bfb2      	itee	lt
 8004136:	2400      	movlt	r4, #0
 8004138:	2318      	movge	r3, #24
 800413a:	fb94 f4f3 	sdivge	r4, r4, r3
 800413e:	f06f 0317 	mvn.w	r3, #23
 8004142:	fb04 3303 	mla	r3, r4, r3, r3
 8004146:	eb03 0b02 	add.w	fp, r3, r2
 800414a:	9b00      	ldr	r3, [sp, #0]
 800414c:	9a05      	ldr	r2, [sp, #20]
 800414e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004408 <__kernel_rem_pio2+0x300>
 8004152:	eb03 0802 	add.w	r8, r3, r2
 8004156:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004158:	1aa7      	subs	r7, r4, r2
 800415a:	ae20      	add	r6, sp, #128	@ 0x80
 800415c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004160:	2500      	movs	r5, #0
 8004162:	4545      	cmp	r5, r8
 8004164:	dd13      	ble.n	800418e <__kernel_rem_pio2+0x86>
 8004166:	9b06      	ldr	r3, [sp, #24]
 8004168:	aa20      	add	r2, sp, #128	@ 0x80
 800416a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800416e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004172:	f04f 0800 	mov.w	r8, #0
 8004176:	9b00      	ldr	r3, [sp, #0]
 8004178:	4598      	cmp	r8, r3
 800417a:	dc31      	bgt.n	80041e0 <__kernel_rem_pio2+0xd8>
 800417c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004408 <__kernel_rem_pio2+0x300>
 8004180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004188:	462f      	mov	r7, r5
 800418a:	2600      	movs	r6, #0
 800418c:	e01b      	b.n	80041c6 <__kernel_rem_pio2+0xbe>
 800418e:	42ef      	cmn	r7, r5
 8004190:	d407      	bmi.n	80041a2 <__kernel_rem_pio2+0x9a>
 8004192:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004196:	f7fc fabb 	bl	8000710 <__aeabi_i2d>
 800419a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800419e:	3501      	adds	r5, #1
 80041a0:	e7df      	b.n	8004162 <__kernel_rem_pio2+0x5a>
 80041a2:	ec51 0b18 	vmov	r0, r1, d8
 80041a6:	e7f8      	b.n	800419a <__kernel_rem_pio2+0x92>
 80041a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80041b0:	f7fc f832 	bl	8000218 <__aeabi_dmul>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041bc:	f7fc f95c 	bl	8000478 <__adddf3>
 80041c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041c4:	3601      	adds	r6, #1
 80041c6:	9b05      	ldr	r3, [sp, #20]
 80041c8:	429e      	cmp	r6, r3
 80041ca:	f1a7 0708 	sub.w	r7, r7, #8
 80041ce:	ddeb      	ble.n	80041a8 <__kernel_rem_pio2+0xa0>
 80041d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041d4:	f108 0801 	add.w	r8, r8, #1
 80041d8:	ecaa 7b02 	vstmia	sl!, {d7}
 80041dc:	3508      	adds	r5, #8
 80041de:	e7ca      	b.n	8004176 <__kernel_rem_pio2+0x6e>
 80041e0:	9b00      	ldr	r3, [sp, #0]
 80041e2:	f8dd 8000 	ldr.w	r8, [sp]
 80041e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80041e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80041f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80041f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80041fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041fc:	ab98      	add	r3, sp, #608	@ 0x260
 80041fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004202:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004206:	ed8d 7b02 	vstr	d7, [sp, #8]
 800420a:	ac0c      	add	r4, sp, #48	@ 0x30
 800420c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800420e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004212:	46a1      	mov	r9, r4
 8004214:	46c2      	mov	sl, r8
 8004216:	f1ba 0f00 	cmp.w	sl, #0
 800421a:	f1a5 0508 	sub.w	r5, r5, #8
 800421e:	dc77      	bgt.n	8004310 <__kernel_rem_pio2+0x208>
 8004220:	4658      	mov	r0, fp
 8004222:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004226:	f000 fac7 	bl	80047b8 <scalbn>
 800422a:	ec57 6b10 	vmov	r6, r7, d0
 800422e:	2200      	movs	r2, #0
 8004230:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	f7fb ffee 	bl	8000218 <__aeabi_dmul>
 800423c:	ec41 0b10 	vmov	d0, r0, r1
 8004240:	f000 fb3a 	bl	80048b8 <floor>
 8004244:	4b75      	ldr	r3, [pc, #468]	@ (800441c <__kernel_rem_pio2+0x314>)
 8004246:	ec51 0b10 	vmov	r0, r1, d0
 800424a:	2200      	movs	r2, #0
 800424c:	f7fb ffe4 	bl	8000218 <__aeabi_dmul>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4630      	mov	r0, r6
 8004256:	4639      	mov	r1, r7
 8004258:	f7fc f90c 	bl	8000474 <__aeabi_dsub>
 800425c:	460f      	mov	r7, r1
 800425e:	4606      	mov	r6, r0
 8004260:	f7fc fb48 	bl	80008f4 <__aeabi_d2iz>
 8004264:	9002      	str	r0, [sp, #8]
 8004266:	f7fc fa53 	bl	8000710 <__aeabi_i2d>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fc f8ff 	bl	8000474 <__aeabi_dsub>
 8004276:	f1bb 0f00 	cmp.w	fp, #0
 800427a:	4606      	mov	r6, r0
 800427c:	460f      	mov	r7, r1
 800427e:	dd6c      	ble.n	800435a <__kernel_rem_pio2+0x252>
 8004280:	f108 31ff 	add.w	r1, r8, #4294967295
 8004284:	ab0c      	add	r3, sp, #48	@ 0x30
 8004286:	9d02      	ldr	r5, [sp, #8]
 8004288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800428c:	f1cb 0018 	rsb	r0, fp, #24
 8004290:	fa43 f200 	asr.w	r2, r3, r0
 8004294:	4415      	add	r5, r2
 8004296:	4082      	lsls	r2, r0
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	aa0c      	add	r2, sp, #48	@ 0x30
 800429c:	9502      	str	r5, [sp, #8]
 800429e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80042a2:	f1cb 0217 	rsb	r2, fp, #23
 80042a6:	fa43 f902 	asr.w	r9, r3, r2
 80042aa:	f1b9 0f00 	cmp.w	r9, #0
 80042ae:	dd64      	ble.n	800437a <__kernel_rem_pio2+0x272>
 80042b0:	9b02      	ldr	r3, [sp, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	3301      	adds	r3, #1
 80042b6:	9302      	str	r3, [sp, #8]
 80042b8:	4615      	mov	r5, r2
 80042ba:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80042be:	4590      	cmp	r8, r2
 80042c0:	f300 80b8 	bgt.w	8004434 <__kernel_rem_pio2+0x32c>
 80042c4:	f1bb 0f00 	cmp.w	fp, #0
 80042c8:	dd07      	ble.n	80042da <__kernel_rem_pio2+0x1d2>
 80042ca:	f1bb 0f01 	cmp.w	fp, #1
 80042ce:	f000 80bf 	beq.w	8004450 <__kernel_rem_pio2+0x348>
 80042d2:	f1bb 0f02 	cmp.w	fp, #2
 80042d6:	f000 80c6 	beq.w	8004466 <__kernel_rem_pio2+0x35e>
 80042da:	f1b9 0f02 	cmp.w	r9, #2
 80042de:	d14c      	bne.n	800437a <__kernel_rem_pio2+0x272>
 80042e0:	4632      	mov	r2, r6
 80042e2:	463b      	mov	r3, r7
 80042e4:	494e      	ldr	r1, [pc, #312]	@ (8004420 <__kernel_rem_pio2+0x318>)
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7fc f8c4 	bl	8000474 <__aeabi_dsub>
 80042ec:	4606      	mov	r6, r0
 80042ee:	460f      	mov	r7, r1
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d042      	beq.n	800437a <__kernel_rem_pio2+0x272>
 80042f4:	4658      	mov	r0, fp
 80042f6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004410 <__kernel_rem_pio2+0x308>
 80042fa:	f000 fa5d 	bl	80047b8 <scalbn>
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	ec53 2b10 	vmov	r2, r3, d0
 8004306:	f7fc f8b5 	bl	8000474 <__aeabi_dsub>
 800430a:	4606      	mov	r6, r0
 800430c:	460f      	mov	r7, r1
 800430e:	e034      	b.n	800437a <__kernel_rem_pio2+0x272>
 8004310:	4b44      	ldr	r3, [pc, #272]	@ (8004424 <__kernel_rem_pio2+0x31c>)
 8004312:	2200      	movs	r2, #0
 8004314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004318:	f7fb ff7e 	bl	8000218 <__aeabi_dmul>
 800431c:	f7fc faea 	bl	80008f4 <__aeabi_d2iz>
 8004320:	f7fc f9f6 	bl	8000710 <__aeabi_i2d>
 8004324:	4b40      	ldr	r3, [pc, #256]	@ (8004428 <__kernel_rem_pio2+0x320>)
 8004326:	2200      	movs	r2, #0
 8004328:	4606      	mov	r6, r0
 800432a:	460f      	mov	r7, r1
 800432c:	f7fb ff74 	bl	8000218 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004338:	f7fc f89c 	bl	8000474 <__aeabi_dsub>
 800433c:	f7fc fada 	bl	80008f4 <__aeabi_d2iz>
 8004340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004344:	f849 0b04 	str.w	r0, [r9], #4
 8004348:	4639      	mov	r1, r7
 800434a:	4630      	mov	r0, r6
 800434c:	f7fc f894 	bl	8000478 <__adddf3>
 8004350:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004358:	e75d      	b.n	8004216 <__kernel_rem_pio2+0x10e>
 800435a:	d107      	bne.n	800436c <__kernel_rem_pio2+0x264>
 800435c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004360:	aa0c      	add	r2, sp, #48	@ 0x30
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800436a:	e79e      	b.n	80042aa <__kernel_rem_pio2+0x1a2>
 800436c:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <__kernel_rem_pio2+0x324>)
 800436e:	2200      	movs	r2, #0
 8004370:	f7fc faac 	bl	80008cc <__aeabi_dcmpge>
 8004374:	2800      	cmp	r0, #0
 8004376:	d143      	bne.n	8004400 <__kernel_rem_pio2+0x2f8>
 8004378:	4681      	mov	r9, r0
 800437a:	2200      	movs	r2, #0
 800437c:	2300      	movs	r3, #0
 800437e:	4630      	mov	r0, r6
 8004380:	4639      	mov	r1, r7
 8004382:	f7fc fa85 	bl	8000890 <__aeabi_dcmpeq>
 8004386:	2800      	cmp	r0, #0
 8004388:	f000 80bf 	beq.w	800450a <__kernel_rem_pio2+0x402>
 800438c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004390:	2200      	movs	r2, #0
 8004392:	9900      	ldr	r1, [sp, #0]
 8004394:	428b      	cmp	r3, r1
 8004396:	da6e      	bge.n	8004476 <__kernel_rem_pio2+0x36e>
 8004398:	2a00      	cmp	r2, #0
 800439a:	f000 8089 	beq.w	80044b0 <__kernel_rem_pio2+0x3a8>
 800439e:	f108 38ff 	add.w	r8, r8, #4294967295
 80043a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80043a4:	f1ab 0b18 	sub.w	fp, fp, #24
 80043a8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f6      	beq.n	800439e <__kernel_rem_pio2+0x296>
 80043b0:	4658      	mov	r0, fp
 80043b2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004410 <__kernel_rem_pio2+0x308>
 80043b6:	f000 f9ff 	bl	80047b8 <scalbn>
 80043ba:	f108 0301 	add.w	r3, r8, #1
 80043be:	00da      	lsls	r2, r3, #3
 80043c0:	9205      	str	r2, [sp, #20]
 80043c2:	ec55 4b10 	vmov	r4, r5, d0
 80043c6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80043c8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004424 <__kernel_rem_pio2+0x31c>
 80043cc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80043d0:	4646      	mov	r6, r8
 80043d2:	f04f 0a00 	mov.w	sl, #0
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	f280 80cf 	bge.w	800457a <__kernel_rem_pio2+0x472>
 80043dc:	4644      	mov	r4, r8
 80043de:	2c00      	cmp	r4, #0
 80043e0:	f2c0 80fd 	blt.w	80045de <__kernel_rem_pio2+0x4d6>
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <__kernel_rem_pio2+0x328>)
 80043e6:	461f      	mov	r7, r3
 80043e8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80043ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043ee:	9306      	str	r3, [sp, #24]
 80043f0:	f04f 0a00 	mov.w	sl, #0
 80043f4:	f04f 0b00 	mov.w	fp, #0
 80043f8:	2600      	movs	r6, #0
 80043fa:	eba8 0504 	sub.w	r5, r8, r4
 80043fe:	e0e2      	b.n	80045c6 <__kernel_rem_pio2+0x4be>
 8004400:	f04f 0902 	mov.w	r9, #2
 8004404:	e754      	b.n	80042b0 <__kernel_rem_pio2+0x1a8>
 8004406:	bf00      	nop
	...
 8004414:	3ff00000 	.word	0x3ff00000
 8004418:	08004ba0 	.word	0x08004ba0
 800441c:	40200000 	.word	0x40200000
 8004420:	3ff00000 	.word	0x3ff00000
 8004424:	3e700000 	.word	0x3e700000
 8004428:	41700000 	.word	0x41700000
 800442c:	3fe00000 	.word	0x3fe00000
 8004430:	08004b60 	.word	0x08004b60
 8004434:	f854 3b04 	ldr.w	r3, [r4], #4
 8004438:	b945      	cbnz	r5, 800444c <__kernel_rem_pio2+0x344>
 800443a:	b123      	cbz	r3, 8004446 <__kernel_rem_pio2+0x33e>
 800443c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004440:	f844 3c04 	str.w	r3, [r4, #-4]
 8004444:	2301      	movs	r3, #1
 8004446:	3201      	adds	r2, #1
 8004448:	461d      	mov	r5, r3
 800444a:	e738      	b.n	80042be <__kernel_rem_pio2+0x1b6>
 800444c:	1acb      	subs	r3, r1, r3
 800444e:	e7f7      	b.n	8004440 <__kernel_rem_pio2+0x338>
 8004450:	f108 32ff 	add.w	r2, r8, #4294967295
 8004454:	ab0c      	add	r3, sp, #48	@ 0x30
 8004456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800445e:	a90c      	add	r1, sp, #48	@ 0x30
 8004460:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004464:	e739      	b.n	80042da <__kernel_rem_pio2+0x1d2>
 8004466:	f108 32ff 	add.w	r2, r8, #4294967295
 800446a:	ab0c      	add	r3, sp, #48	@ 0x30
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004474:	e7f3      	b.n	800445e <__kernel_rem_pio2+0x356>
 8004476:	a90c      	add	r1, sp, #48	@ 0x30
 8004478:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800447c:	3b01      	subs	r3, #1
 800447e:	430a      	orrs	r2, r1
 8004480:	e787      	b.n	8004392 <__kernel_rem_pio2+0x28a>
 8004482:	3401      	adds	r4, #1
 8004484:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004488:	2a00      	cmp	r2, #0
 800448a:	d0fa      	beq.n	8004482 <__kernel_rem_pio2+0x37a>
 800448c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800448e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004492:	eb0d 0503 	add.w	r5, sp, r3
 8004496:	9b06      	ldr	r3, [sp, #24]
 8004498:	aa20      	add	r2, sp, #128	@ 0x80
 800449a:	4443      	add	r3, r8
 800449c:	f108 0701 	add.w	r7, r8, #1
 80044a0:	3d98      	subs	r5, #152	@ 0x98
 80044a2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80044a6:	4444      	add	r4, r8
 80044a8:	42bc      	cmp	r4, r7
 80044aa:	da04      	bge.n	80044b6 <__kernel_rem_pio2+0x3ae>
 80044ac:	46a0      	mov	r8, r4
 80044ae:	e6a2      	b.n	80041f6 <__kernel_rem_pio2+0xee>
 80044b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044b2:	2401      	movs	r4, #1
 80044b4:	e7e6      	b.n	8004484 <__kernel_rem_pio2+0x37c>
 80044b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80044bc:	f7fc f928 	bl	8000710 <__aeabi_i2d>
 80044c0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004788 <__kernel_rem_pio2+0x680>
 80044c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80044c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044d0:	46b2      	mov	sl, r6
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	9b05      	ldr	r3, [sp, #20]
 80044d8:	4598      	cmp	r8, r3
 80044da:	dd05      	ble.n	80044e8 <__kernel_rem_pio2+0x3e0>
 80044dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044e0:	3701      	adds	r7, #1
 80044e2:	eca5 7b02 	vstmia	r5!, {d7}
 80044e6:	e7df      	b.n	80044a8 <__kernel_rem_pio2+0x3a0>
 80044e8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80044ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80044f0:	f7fb fe92 	bl	8000218 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044fc:	f7fb ffbc 	bl	8000478 <__adddf3>
 8004500:	f108 0801 	add.w	r8, r8, #1
 8004504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004508:	e7e5      	b.n	80044d6 <__kernel_rem_pio2+0x3ce>
 800450a:	f1cb 0000 	rsb	r0, fp, #0
 800450e:	ec47 6b10 	vmov	d0, r6, r7
 8004512:	f000 f951 	bl	80047b8 <scalbn>
 8004516:	ec55 4b10 	vmov	r4, r5, d0
 800451a:	4b9d      	ldr	r3, [pc, #628]	@ (8004790 <__kernel_rem_pio2+0x688>)
 800451c:	2200      	movs	r2, #0
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fc f9d3 	bl	80008cc <__aeabi_dcmpge>
 8004526:	b300      	cbz	r0, 800456a <__kernel_rem_pio2+0x462>
 8004528:	4b9a      	ldr	r3, [pc, #616]	@ (8004794 <__kernel_rem_pio2+0x68c>)
 800452a:	2200      	movs	r2, #0
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fb fe72 	bl	8000218 <__aeabi_dmul>
 8004534:	f7fc f9de 	bl	80008f4 <__aeabi_d2iz>
 8004538:	4606      	mov	r6, r0
 800453a:	f7fc f8e9 	bl	8000710 <__aeabi_i2d>
 800453e:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <__kernel_rem_pio2+0x688>)
 8004540:	2200      	movs	r2, #0
 8004542:	f7fb fe69 	bl	8000218 <__aeabi_dmul>
 8004546:	460b      	mov	r3, r1
 8004548:	4602      	mov	r2, r0
 800454a:	4629      	mov	r1, r5
 800454c:	4620      	mov	r0, r4
 800454e:	f7fb ff91 	bl	8000474 <__aeabi_dsub>
 8004552:	f7fc f9cf 	bl	80008f4 <__aeabi_d2iz>
 8004556:	ab0c      	add	r3, sp, #48	@ 0x30
 8004558:	f10b 0b18 	add.w	fp, fp, #24
 800455c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004560:	f108 0801 	add.w	r8, r8, #1
 8004564:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004568:	e722      	b.n	80043b0 <__kernel_rem_pio2+0x2a8>
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f7fc f9c1 	bl	80008f4 <__aeabi_d2iz>
 8004572:	ab0c      	add	r3, sp, #48	@ 0x30
 8004574:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004578:	e71a      	b.n	80043b0 <__kernel_rem_pio2+0x2a8>
 800457a:	ab0c      	add	r3, sp, #48	@ 0x30
 800457c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004580:	f7fc f8c6 	bl	8000710 <__aeabi_i2d>
 8004584:	4622      	mov	r2, r4
 8004586:	462b      	mov	r3, r5
 8004588:	f7fb fe46 	bl	8000218 <__aeabi_dmul>
 800458c:	4652      	mov	r2, sl
 800458e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004592:	465b      	mov	r3, fp
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	f7fb fe3e 	bl	8000218 <__aeabi_dmul>
 800459c:	3e01      	subs	r6, #1
 800459e:	4604      	mov	r4, r0
 80045a0:	460d      	mov	r5, r1
 80045a2:	e718      	b.n	80043d6 <__kernel_rem_pio2+0x2ce>
 80045a4:	9906      	ldr	r1, [sp, #24]
 80045a6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80045aa:	9106      	str	r1, [sp, #24]
 80045ac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80045b0:	f7fb fe32 	bl	8000218 <__aeabi_dmul>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4650      	mov	r0, sl
 80045ba:	4659      	mov	r1, fp
 80045bc:	f7fb ff5c 	bl	8000478 <__adddf3>
 80045c0:	3601      	adds	r6, #1
 80045c2:	4682      	mov	sl, r0
 80045c4:	468b      	mov	fp, r1
 80045c6:	9b00      	ldr	r3, [sp, #0]
 80045c8:	429e      	cmp	r6, r3
 80045ca:	dc01      	bgt.n	80045d0 <__kernel_rem_pio2+0x4c8>
 80045cc:	42b5      	cmp	r5, r6
 80045ce:	dae9      	bge.n	80045a4 <__kernel_rem_pio2+0x49c>
 80045d0:	ab48      	add	r3, sp, #288	@ 0x120
 80045d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80045d6:	e9c5 ab00 	strd	sl, fp, [r5]
 80045da:	3c01      	subs	r4, #1
 80045dc:	e6ff      	b.n	80043de <__kernel_rem_pio2+0x2d6>
 80045de:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	dc0b      	bgt.n	80045fc <__kernel_rem_pio2+0x4f4>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dc39      	bgt.n	800465c <__kernel_rem_pio2+0x554>
 80045e8:	d05d      	beq.n	80046a6 <__kernel_rem_pio2+0x59e>
 80045ea:	9b02      	ldr	r3, [sp, #8]
 80045ec:	f003 0007 	and.w	r0, r3, #7
 80045f0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80045f4:	ecbd 8b02 	vpop	{d8}
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d1f3      	bne.n	80045ea <__kernel_rem_pio2+0x4e2>
 8004602:	9b05      	ldr	r3, [sp, #20]
 8004604:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004608:	eb0d 0403 	add.w	r4, sp, r3
 800460c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004610:	4625      	mov	r5, r4
 8004612:	46c2      	mov	sl, r8
 8004614:	f1ba 0f00 	cmp.w	sl, #0
 8004618:	f1a5 0508 	sub.w	r5, r5, #8
 800461c:	dc6b      	bgt.n	80046f6 <__kernel_rem_pio2+0x5ee>
 800461e:	4645      	mov	r5, r8
 8004620:	2d01      	cmp	r5, #1
 8004622:	f1a4 0408 	sub.w	r4, r4, #8
 8004626:	f300 8087 	bgt.w	8004738 <__kernel_rem_pio2+0x630>
 800462a:	9c05      	ldr	r4, [sp, #20]
 800462c:	ab48      	add	r3, sp, #288	@ 0x120
 800462e:	441c      	add	r4, r3
 8004630:	2000      	movs	r0, #0
 8004632:	2100      	movs	r1, #0
 8004634:	f1b8 0f01 	cmp.w	r8, #1
 8004638:	f300 809c 	bgt.w	8004774 <__kernel_rem_pio2+0x66c>
 800463c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004640:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004644:	f1b9 0f00 	cmp.w	r9, #0
 8004648:	f040 80a6 	bne.w	8004798 <__kernel_rem_pio2+0x690>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	e9c3 7800 	strd	r7, r8, [r3]
 8004652:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004656:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800465a:	e7c6      	b.n	80045ea <__kernel_rem_pio2+0x4e2>
 800465c:	9d05      	ldr	r5, [sp, #20]
 800465e:	ab48      	add	r3, sp, #288	@ 0x120
 8004660:	441d      	add	r5, r3
 8004662:	4644      	mov	r4, r8
 8004664:	2000      	movs	r0, #0
 8004666:	2100      	movs	r1, #0
 8004668:	2c00      	cmp	r4, #0
 800466a:	da35      	bge.n	80046d8 <__kernel_rem_pio2+0x5d0>
 800466c:	f1b9 0f00 	cmp.w	r9, #0
 8004670:	d038      	beq.n	80046e4 <__kernel_rem_pio2+0x5dc>
 8004672:	4602      	mov	r2, r0
 8004674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004678:	9c04      	ldr	r4, [sp, #16]
 800467a:	e9c4 2300 	strd	r2, r3, [r4]
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004686:	f7fb fef5 	bl	8000474 <__aeabi_dsub>
 800468a:	ad4a      	add	r5, sp, #296	@ 0x128
 800468c:	2401      	movs	r4, #1
 800468e:	45a0      	cmp	r8, r4
 8004690:	da2b      	bge.n	80046ea <__kernel_rem_pio2+0x5e2>
 8004692:	f1b9 0f00 	cmp.w	r9, #0
 8004696:	d002      	beq.n	800469e <__kernel_rem_pio2+0x596>
 8004698:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800469c:	4619      	mov	r1, r3
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80046a4:	e7a1      	b.n	80045ea <__kernel_rem_pio2+0x4e2>
 80046a6:	9c05      	ldr	r4, [sp, #20]
 80046a8:	ab48      	add	r3, sp, #288	@ 0x120
 80046aa:	441c      	add	r4, r3
 80046ac:	2000      	movs	r0, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	f1b8 0f00 	cmp.w	r8, #0
 80046b4:	da09      	bge.n	80046ca <__kernel_rem_pio2+0x5c2>
 80046b6:	f1b9 0f00 	cmp.w	r9, #0
 80046ba:	d002      	beq.n	80046c2 <__kernel_rem_pio2+0x5ba>
 80046bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046c0:	4619      	mov	r1, r3
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	e9c3 0100 	strd	r0, r1, [r3]
 80046c8:	e78f      	b.n	80045ea <__kernel_rem_pio2+0x4e2>
 80046ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046ce:	f7fb fed3 	bl	8000478 <__adddf3>
 80046d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80046d6:	e7eb      	b.n	80046b0 <__kernel_rem_pio2+0x5a8>
 80046d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80046dc:	f7fb fecc 	bl	8000478 <__adddf3>
 80046e0:	3c01      	subs	r4, #1
 80046e2:	e7c1      	b.n	8004668 <__kernel_rem_pio2+0x560>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	e7c6      	b.n	8004678 <__kernel_rem_pio2+0x570>
 80046ea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80046ee:	f7fb fec3 	bl	8000478 <__adddf3>
 80046f2:	3401      	adds	r4, #1
 80046f4:	e7cb      	b.n	800468e <__kernel_rem_pio2+0x586>
 80046f6:	ed95 7b00 	vldr	d7, [r5]
 80046fa:	ed8d 7b00 	vstr	d7, [sp]
 80046fe:	ed95 7b02 	vldr	d7, [r5, #8]
 8004702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004706:	ec53 2b17 	vmov	r2, r3, d7
 800470a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800470e:	f7fb feb3 	bl	8000478 <__adddf3>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4606      	mov	r6, r0
 8004718:	460f      	mov	r7, r1
 800471a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800471e:	f7fb fea9 	bl	8000474 <__aeabi_dsub>
 8004722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004726:	f7fb fea7 	bl	8000478 <__adddf3>
 800472a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800472e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004732:	e9c5 6700 	strd	r6, r7, [r5]
 8004736:	e76d      	b.n	8004614 <__kernel_rem_pio2+0x50c>
 8004738:	ed94 7b00 	vldr	d7, [r4]
 800473c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004740:	ec51 0b17 	vmov	r0, r1, d7
 8004744:	4652      	mov	r2, sl
 8004746:	465b      	mov	r3, fp
 8004748:	ed8d 7b00 	vstr	d7, [sp]
 800474c:	f7fb fe94 	bl	8000478 <__adddf3>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4606      	mov	r6, r0
 8004756:	460f      	mov	r7, r1
 8004758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800475c:	f7fb fe8a 	bl	8000474 <__aeabi_dsub>
 8004760:	4652      	mov	r2, sl
 8004762:	465b      	mov	r3, fp
 8004764:	f7fb fe88 	bl	8000478 <__adddf3>
 8004768:	3d01      	subs	r5, #1
 800476a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800476e:	e9c4 6700 	strd	r6, r7, [r4]
 8004772:	e755      	b.n	8004620 <__kernel_rem_pio2+0x518>
 8004774:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004778:	f7fb fe7e 	bl	8000478 <__adddf3>
 800477c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004780:	e758      	b.n	8004634 <__kernel_rem_pio2+0x52c>
 8004782:	bf00      	nop
 8004784:	f3af 8000 	nop.w
	...
 8004790:	41700000 	.word	0x41700000
 8004794:	3e700000 	.word	0x3e700000
 8004798:	9b04      	ldr	r3, [sp, #16]
 800479a:	9a04      	ldr	r2, [sp, #16]
 800479c:	601f      	str	r7, [r3, #0]
 800479e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80047a2:	605c      	str	r4, [r3, #4]
 80047a4:	609d      	str	r5, [r3, #8]
 80047a6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047aa:	60d3      	str	r3, [r2, #12]
 80047ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047b0:	6110      	str	r0, [r2, #16]
 80047b2:	6153      	str	r3, [r2, #20]
 80047b4:	e719      	b.n	80045ea <__kernel_rem_pio2+0x4e2>
 80047b6:	bf00      	nop

080047b8 <scalbn>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	ec55 4b10 	vmov	r4, r5, d0
 80047be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80047c2:	4606      	mov	r6, r0
 80047c4:	462b      	mov	r3, r5
 80047c6:	b991      	cbnz	r1, 80047ee <scalbn+0x36>
 80047c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80047cc:	4323      	orrs	r3, r4
 80047ce:	d03d      	beq.n	800484c <scalbn+0x94>
 80047d0:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <scalbn+0xf0>)
 80047d2:	4620      	mov	r0, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fb fd1e 	bl	8000218 <__aeabi_dmul>
 80047dc:	4b33      	ldr	r3, [pc, #204]	@ (80048ac <scalbn+0xf4>)
 80047de:	429e      	cmp	r6, r3
 80047e0:	4604      	mov	r4, r0
 80047e2:	460d      	mov	r5, r1
 80047e4:	da0f      	bge.n	8004806 <scalbn+0x4e>
 80047e6:	a328      	add	r3, pc, #160	@ (adr r3, 8004888 <scalbn+0xd0>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	e01e      	b.n	800482c <scalbn+0x74>
 80047ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80047f2:	4291      	cmp	r1, r2
 80047f4:	d10b      	bne.n	800480e <scalbn+0x56>
 80047f6:	4622      	mov	r2, r4
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fb fe3c 	bl	8000478 <__adddf3>
 8004800:	4604      	mov	r4, r0
 8004802:	460d      	mov	r5, r1
 8004804:	e022      	b.n	800484c <scalbn+0x94>
 8004806:	460b      	mov	r3, r1
 8004808:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800480c:	3936      	subs	r1, #54	@ 0x36
 800480e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004812:	4296      	cmp	r6, r2
 8004814:	dd0d      	ble.n	8004832 <scalbn+0x7a>
 8004816:	2d00      	cmp	r5, #0
 8004818:	a11d      	add	r1, pc, #116	@ (adr r1, 8004890 <scalbn+0xd8>)
 800481a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800481e:	da02      	bge.n	8004826 <scalbn+0x6e>
 8004820:	a11d      	add	r1, pc, #116	@ (adr r1, 8004898 <scalbn+0xe0>)
 8004822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004826:	a31a      	add	r3, pc, #104	@ (adr r3, 8004890 <scalbn+0xd8>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fcf4 	bl	8000218 <__aeabi_dmul>
 8004830:	e7e6      	b.n	8004800 <scalbn+0x48>
 8004832:	1872      	adds	r2, r6, r1
 8004834:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004838:	428a      	cmp	r2, r1
 800483a:	dcec      	bgt.n	8004816 <scalbn+0x5e>
 800483c:	2a00      	cmp	r2, #0
 800483e:	dd08      	ble.n	8004852 <scalbn+0x9a>
 8004840:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004844:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004848:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800484c:	ec45 4b10 	vmov	d0, r4, r5
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004856:	da08      	bge.n	800486a <scalbn+0xb2>
 8004858:	2d00      	cmp	r5, #0
 800485a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004888 <scalbn+0xd0>)
 800485c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004860:	dac1      	bge.n	80047e6 <scalbn+0x2e>
 8004862:	a10f      	add	r1, pc, #60	@ (adr r1, 80048a0 <scalbn+0xe8>)
 8004864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004868:	e7bd      	b.n	80047e6 <scalbn+0x2e>
 800486a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800486e:	3236      	adds	r2, #54	@ 0x36
 8004870:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004874:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004878:	4620      	mov	r0, r4
 800487a:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <scalbn+0xf8>)
 800487c:	4629      	mov	r1, r5
 800487e:	2200      	movs	r2, #0
 8004880:	e7d4      	b.n	800482c <scalbn+0x74>
 8004882:	bf00      	nop
 8004884:	f3af 8000 	nop.w
 8004888:	c2f8f359 	.word	0xc2f8f359
 800488c:	01a56e1f 	.word	0x01a56e1f
 8004890:	8800759c 	.word	0x8800759c
 8004894:	7e37e43c 	.word	0x7e37e43c
 8004898:	8800759c 	.word	0x8800759c
 800489c:	fe37e43c 	.word	0xfe37e43c
 80048a0:	c2f8f359 	.word	0xc2f8f359
 80048a4:	81a56e1f 	.word	0x81a56e1f
 80048a8:	43500000 	.word	0x43500000
 80048ac:	ffff3cb0 	.word	0xffff3cb0
 80048b0:	3c900000 	.word	0x3c900000
 80048b4:	00000000 	.word	0x00000000

080048b8 <floor>:
 80048b8:	ec51 0b10 	vmov	r0, r1, d0
 80048bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80048c8:	2e13      	cmp	r6, #19
 80048ca:	460c      	mov	r4, r1
 80048cc:	4605      	mov	r5, r0
 80048ce:	4680      	mov	r8, r0
 80048d0:	dc34      	bgt.n	800493c <floor+0x84>
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	da17      	bge.n	8004906 <floor+0x4e>
 80048d6:	a332      	add	r3, pc, #200	@ (adr r3, 80049a0 <floor+0xe8>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb fdcc 	bl	8000478 <__adddf3>
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	f7fb fffc 	bl	80008e0 <__aeabi_dcmpgt>
 80048e8:	b150      	cbz	r0, 8004900 <floor+0x48>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	da55      	bge.n	800499a <floor+0xe2>
 80048ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80048f2:	432c      	orrs	r4, r5
 80048f4:	2500      	movs	r5, #0
 80048f6:	42ac      	cmp	r4, r5
 80048f8:	4c2b      	ldr	r4, [pc, #172]	@ (80049a8 <floor+0xf0>)
 80048fa:	bf08      	it	eq
 80048fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004900:	4621      	mov	r1, r4
 8004902:	4628      	mov	r0, r5
 8004904:	e023      	b.n	800494e <floor+0x96>
 8004906:	4f29      	ldr	r7, [pc, #164]	@ (80049ac <floor+0xf4>)
 8004908:	4137      	asrs	r7, r6
 800490a:	ea01 0307 	and.w	r3, r1, r7
 800490e:	4303      	orrs	r3, r0
 8004910:	d01d      	beq.n	800494e <floor+0x96>
 8004912:	a323      	add	r3, pc, #140	@ (adr r3, 80049a0 <floor+0xe8>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fdae 	bl	8000478 <__adddf3>
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	f7fb ffde 	bl	80008e0 <__aeabi_dcmpgt>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0eb      	beq.n	8004900 <floor+0x48>
 8004928:	2c00      	cmp	r4, #0
 800492a:	bfbe      	ittt	lt
 800492c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004930:	4133      	asrlt	r3, r6
 8004932:	18e4      	addlt	r4, r4, r3
 8004934:	ea24 0407 	bic.w	r4, r4, r7
 8004938:	2500      	movs	r5, #0
 800493a:	e7e1      	b.n	8004900 <floor+0x48>
 800493c:	2e33      	cmp	r6, #51	@ 0x33
 800493e:	dd0a      	ble.n	8004956 <floor+0x9e>
 8004940:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004944:	d103      	bne.n	800494e <floor+0x96>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	f7fb fd95 	bl	8000478 <__adddf3>
 800494e:	ec41 0b10 	vmov	d0, r0, r1
 8004952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004956:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800495a:	f04f 37ff 	mov.w	r7, #4294967295
 800495e:	40df      	lsrs	r7, r3
 8004960:	4207      	tst	r7, r0
 8004962:	d0f4      	beq.n	800494e <floor+0x96>
 8004964:	a30e      	add	r3, pc, #56	@ (adr r3, 80049a0 <floor+0xe8>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fd85 	bl	8000478 <__adddf3>
 800496e:	2200      	movs	r2, #0
 8004970:	2300      	movs	r3, #0
 8004972:	f7fb ffb5 	bl	80008e0 <__aeabi_dcmpgt>
 8004976:	2800      	cmp	r0, #0
 8004978:	d0c2      	beq.n	8004900 <floor+0x48>
 800497a:	2c00      	cmp	r4, #0
 800497c:	da0a      	bge.n	8004994 <floor+0xdc>
 800497e:	2e14      	cmp	r6, #20
 8004980:	d101      	bne.n	8004986 <floor+0xce>
 8004982:	3401      	adds	r4, #1
 8004984:	e006      	b.n	8004994 <floor+0xdc>
 8004986:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800498a:	2301      	movs	r3, #1
 800498c:	40b3      	lsls	r3, r6
 800498e:	441d      	add	r5, r3
 8004990:	4545      	cmp	r5, r8
 8004992:	d3f6      	bcc.n	8004982 <floor+0xca>
 8004994:	ea25 0507 	bic.w	r5, r5, r7
 8004998:	e7b2      	b.n	8004900 <floor+0x48>
 800499a:	2500      	movs	r5, #0
 800499c:	462c      	mov	r4, r5
 800499e:	e7af      	b.n	8004900 <floor+0x48>
 80049a0:	8800759c 	.word	0x8800759c
 80049a4:	7e37e43c 	.word	0x7e37e43c
 80049a8:	bff00000 	.word	0xbff00000
 80049ac:	000fffff 	.word	0x000fffff

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
